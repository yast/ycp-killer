#!/usr/bin/env ruby

require "cheetah"
require "thor"
require "yaml"

BASE_DIR = File.expand_path(File.dirname(__FILE__))

DATA_DIR    = "#{BASE_DIR}/data"
STUBS_DIR   = "#{BASE_DIR}/stubs"
PATCHES_DIR = "#{BASE_DIR}/patches"

ERROR_FILE = "#{BASE_DIR}/error.log"

module Messages
  MAX_MESSAGE_WIDTH = 70

  class << self
    def start(message)
      print message

      @last_message_size = message.size
    end

    def finish(status)
      spaces = if @last_message_size < MAX_MESSAGE_WIDTH
        " " * (MAX_MESSAGE_WIDTH - @last_message_size)
      else
        ""
      end

      puts spaces + status
    end

    def info(message)
      puts message
    end
  end
end

class YastModule

  WORK_DIR   = "work"
  RESULT_DIR = "result"

  attr_reader :name,
    :work_dir,
    :result_dir,
    :deps,
    :exports,
    :excluded,
    :moves


  def initialize(name, data, modules, config)
    @name       = name
    @data       = data
    @modules    = modules
    @config     = config
    @work_dir   = "#{@config["yast_dir"]}/#{WORK_DIR}/#@name"
    @result_dir = "#{@config["yast_dir"]}/#{RESULT_DIR}/#@name"
    @deps       = @data["deps"] || []
    @exports    = @data["exports"] || ["src"]
    @excluded   = @data["excluded"] || []
    @moves      = @data["moves"] || []
  end

  def convert
    clone
    restructure
    patch
    compile
  end

  def clone
    FileUtils.rm_rf(work_dir)

    Cheetah.run "git", "clone", "git://github.com/yast/yast-#@name.git", work_dir
  end

  def patch
    patch_file = "#{PATCHES_DIR}/#{@name}.patch"
    return unless File.exists?(patch_file)

    Dir.chdir work_dir do
      Cheetah.run "git", "apply", patch_file
    end
  end

  def genpatch
    patch_file = "#{PATCHES_DIR}/#{@name}.patch"

    FileUtils.rm_rf patch_file

    Dir.chdir work_dir do
      output = Cheetah.run "git", "diff", :stdout => :capture
      # git fails to apply empty file, so don't create it
      return if output.empty?

      File.open(patch_file, "w") do |f|
        f.write output
      end
    end
  end

  def compile
    clean_previous_compilation
    prepare_result_dir

    counts = {
      :ok          => 0,
      :excluded    => excluded.size,
      :error_y2r   => 0,
      :error_ruby  => 0,
      :error_other => 0
    }

    Dir.chdir work_dir do
      failed = compile_modules counts
      convert_ycp counts, failed
    end

    counts
  end

  def exported_module_paths
    exports.map { |e| "#{work_dir}/#{e}/modules" }
  end

  def exported_include_paths
    exports.map { |e| "#{work_dir}/#{e}/include" }
  end

  def reset
    Dir.chdir work_dir do
      Cheetah.run "git", "reset", "--hard", "HEAD"

      output = Cheetah.run "git", "status", "--short", :stdout => :capture
      output.split("\n").each do |line|
        if line =~ /^\?\?\s+(.*)$/
          FileUtils.rm_rf $1
        else
          raise "Unknown git file status: #{line}"
        end
      end
    end
  end

  def restructure
    Dir.chdir work_dir do
      moves.each do |move|
        FileUtils.mkdir_p move["to"]

        Dir.glob("#{work_dir}/#{move["from"]}", File::FNM_DOTMATCH) do |file|
          # We want the moves stored in git index. This way the "genpatch"
          # command creates patch against state after restructuring, not
          # before it.
          Cheetah.run "git", "mv", file, move["to"]
        end
      end
    end
  end

  private

  def module_paths
    # We must lazy load it as all dependencies must be already initialized.
    if @module_paths.nil? 
      @module_paths = [STUBS_DIR] + exported_include_paths
      deps.reduce(@module_paths) do |paths,dependency| 
        paths.concat dependency.exported_include_paths
      end
    end
    @module_paths
  end

  def include_paths
    # We must lazy load it as all dependencies must be already initialized.
    if @include_paths.nil? 
      @include_paths = [STUBS_DIR] + exported_include_paths
      deps.reduce(@include_paths) do |paths,dependency| 
        paths.concat dependency.exported_include_paths
      end
    end
    @include_paths
  end

  def compile_modules counts
    failed = []
    exports.each do |exported_dir|
      Dir["#{exported_dir}/modules/**/*.ycp"].each do |work_file|
        begin
          create_ybc work_file
        rescue Exception => e
          Messages.start " * #{work_file}"
          Messages.finish "ERROR(other)"
          log_error(work_file, e)
          counts[:error_other] += 1
          failed << work_file
        end
      end
    end
    failed
  end

  def convert_ycp counts, failed
    Dir["**/*.y{cp,h}"].each do |file|
      next if excluded.include?(file)
      next if failed.include?(file)

      Messages.start "  * #{file}"

      work_file = "#{work_dir}/#{file}"
      FileUtils.rm "#{result_dir}/#{file}"
      result_file = "#{result_dir}/#{file}".sub(/\.y(cp|h)$/, ".rb")

      begin
        # This makes private symbols in modules visible. Needed by some
        # testsuites.
        ENV["Y2ALLGLOBAL"] = "1"

        create_rb  work_file, result_file
      rescue Cheetah::ExecutionFailed => e
        Messages.finish "ERROR(y2r)"
        log_error(work_file, e)
        counts[:error_y2r] += 1
        next
      rescue Exception => e
        Messages.finish "ERROR(other)"
        log_error(work_file, e)
        counts[:error_other] += 1
        next
      end

      begin
        check_rb result_file
      rescue Cheetah::ExecutionFailed => e
        Messages.finish "ERROR(ruby)"
        log_error(work_file, e)
        counts[:error_ruby] += 1
        next
      rescue Exception => e
        Messages.finish "ERROR(other)"
        log_error(work_file, e)
        counts[:error_other] += 1
        next
      end

      Messages.finish "OK"
      counts[:ok] += 1
    end
  end

  def clean_previous_compilation
    FileUtils.rm_rf result_dir
    Dir["#{work_dir}/**/*.ybc"].each do |file|
      FileUtils.rm file
    end
  end

  def prepare_result_dir
    FileUtils.mkdir_p File.dirname(result_dir)
    FileUtils.copy_entry(work_dir, result_dir)
  end

  def create_ybc(file)
    cmd = [@config["ycpc"], "--no-std-includes", "--no-std-modules"]
    module_paths.each do |module_path|
      cmd << "--module-path" << module_path
    end
    include_paths.each do |include_path|
      cmd << "--include-path" << include_path
    end
    cmd << "-c" << file

    Cheetah.run cmd
  end

  def create_rb(file, output_file)
    cmd = [@config["y2r"]]
    cmd << "--ycpc" << @config["ycpc"]
    module_paths.each do |module_path|
      cmd << "--module-path" << module_path
    end
    include_paths.each do |include_path|
      cmd << "--include-path" << include_path
    end
    cmd << file
    cmd << output_file

    Cheetah.run cmd
  end

  def check_rb(file)
    Cheetah.run "ruby", "-c", file
  end

  def log_error(file, e)
    File.open(ERROR_FILE, "a") do |f|
      f.puts file
      f.puts "-" * file.size
      f.puts
      if e.is_a?(Cheetah::ExecutionFailed)
        f.puts e.stderr
      else
        f.puts e.message
        e.backtrace.each { |l| f.puts l }
      end
      f.puts
    end
  end

end

class CLI < Thor
  def initialize(*args)
    super *args

    load_config
    load_module_data
  end

  desc "clone <module>...", "Clone module(s)"
  def clone(*module_names)
    modules = modules_from_names(module_names)
    with_modules modules, "Cloning", true do |mod|
      mod.clone
    end
  end

  desc "convert <module>...", "Convert module(s)"
  def convert(*module_names)
    report_results(module_names) do |mod|
      mod.convert
    end
  end

  desc "genpatch <module>...", "Store changes from work directory of module(s) into a patch"
  def genpatch(*module_names)
    modules = modules_from_names(module_names)
    with_modules modules, "Generating patch", true do |mod|
      mod.genpatch
    end
  end

  desc "patch <module>...", "Patch module(s)"
  def patch(*module_names)
    modules = modules_from_names(module_names)
    with_modules modules, "Patching", true do |mod|
      mod.patch
    end
  end

  desc "reset <module>...", "Revert module(s) work directory to clean state"
  def reset(*module_names)
    modules = modules_from_names(module_names)
    with_modules modules, "Resetting", true do |mod|
      mod.reset
    end
  end

  desc "restructure <module>...", "Change module(s) work directory structure according to fit the Y2DIR scheme"
  def restructure(*module_names)
    modules = modules_from_names(module_names)
    with_modules modules, "Restructuring", true do |mod|
      mod.restructure
    end
  end

  desc "compile <module>...", "Compile module(s)"
  def compile(*module_names)
    report_results(module_names) do |mod|
      mod.compile
    end
  end

  private

  def report_results(module_names)
    compile_stubs

    FileUtils.rm_rf(ERROR_FILE)

    counts = {
      :ok          => 0,
      :excluded    => 0,
      :error_y2r   => 0,
      :error_ruby  => 0,
      :error_other => 0
    }

    modules = modules_from_names(module_names)
    with_modules modules, "Compiling", false do |mod|
      module_counts = yield(mod)
      counts.keys.each { |k| counts[k] += module_counts[k] }
    end

    puts
    puts "-----"
    puts
    puts "Total OK:           #{counts[:ok]}"
    puts "Total EXCLUDED:     #{counts[:excluded]}"
    puts "Total ERROR(y2r):   #{counts[:error_y2r]}"
    puts "Total ERROR(ruby):  #{counts[:error_ruby]}"
    puts "Total ERROR(other): #{counts[:error_other]}"

  end

  def compile_stubs
    Dir["#{STUBS_DIR}/*.ycp"].each do |file|
      Cheetah.run @config["ycpc"], "-c", file
    end
  end

  def load_config
    @config = YAML.load_file("#{BASE_DIR}/config.yml")
  end

  def load_module_data
    @modules = {}

    Dir["#{DATA_DIR}/*.yml"].sort.each do |file|
      name = File.basename(file, ".yml")

      @modules[name] = YastModule.new(
        name,
        YAML.load_file(file),
        @modules,
        @config
      )
    end
  end

  def modules_from_names(module_names)
    module_names = @modules.keys if module_names == ["all"]

    @modules.values_at(*module_names)
  end

  def with_modules(modules, activity, print_status)
    max_counter_size = 3 + ((Math.log10(modules.size).to_i + 1) * 2)

    modules.each_index do |i|
      message = sprintf(
        "%-#{max_counter_size}s %s",
        "[#{i + 1}/#{modules.size}]",
        "#{activity} #{modules[i].name}..."
      )

      if print_status
        Messages.start message
      else
        Messages.info message
      end

      begin
        yield modules[i]
      rescue Exception => e
        Messages.finish "ERROR" if print_status
        raise
      end

      Messages.finish "OK" if print_status
    end
  end
end

begin
  CLI.start(ARGV)
rescue Cheetah::ExecutionFailed => e
  puts
  puts e.stderr
rescue Exception => e
  puts
  puts e.message
end
