#!/usr/bin/env ruby

require "cheetah"
require "thor"
require "yaml"

BASE_DIR = File.expand_path(File.dirname(__FILE__))

DATA_DIR    = "#{BASE_DIR}/data"
STUBS_DIR   = "#{BASE_DIR}/stubs"
PATCHES_DIR = "#{BASE_DIR}/patches"

ERROR_FILE = "#{BASE_DIR}/error.log"

# Hash: String -> YastModule
$yast_modules = Hash.new do |hash, missing_key|
  #report misspelled modules instead of producing nil
  raise "Unknown yast module #{missing_key}"
end

require_relative "lib/messages"
require_relative "lib/tsorter"
require_relative "lib/yast_module"
require_relative "lib/commands/clone_command"
require_relative "lib/commands/convert_command"
require_relative "lib/commands/genpatch_command"
require_relative "lib/commands/patch_command"
require_relative "lib/commands/reset_command"
require_relative "lib/commands/restructure_command"
require_relative "lib/commands/ybc_command"
require_relative "lib/commands/ruby_command"
require_relative "lib/commands/makefile_command"
require_relative "lib/commands/package_command"
require_relative "lib/commands/pull_command"

class CLI < Thor

  class_option :debug, :type => :boolean, :desc => "verbosely log what commands are run"

  def initialize(*args)
    super *args

    if options[:debug]
      log = Logger.new(STDOUT)
      Cheetah.default_options = { :logger => log }
    end

    load_config
    load_module_data
  end

  desc "clone <module>...", "Clone module(s)"
  def clone(*module_names)
    modules = modules_from_names(module_names)
    with_modules modules do |mod|
      Commands::CloneCommand.new(@config).apply(mod)
    end
  end

  desc "convert <module>...", "Convert module(s)"
  def convert(*module_names)
    report_results(module_names) do |mod|
      Commands::ConvertCommand.new(@config).apply(mod)
    end
  end

  desc "genpatch <module>...", "Store changes from work directory of module(s) into a patch"
  def genpatch(*module_names)
    modules = modules_from_names(module_names)
    with_modules modules do |mod|
      Commands::GenpatchCommand.new(@config).apply(mod)
    end
  end

  desc "patch <module>...", "Patch module(s)"
  def patch(*module_names)
    modules = modules_from_names(module_names)
    with_modules modules do |mod|
      Commands::PatchCommand.new(@config).apply(mod)
    end
  end

  desc "reset <module>...", "Revert module(s) work directory to clean state"
  def reset(*module_names)
    modules = modules_from_names(module_names)
    with_modules modules do |mod|
      Commands::ResetCommand.new(@config).apply(mod)
    end
  end

  desc "pull <module>...", "Update the module(s) work directory to the latest state (git pull)"
  def pull(*module_names)
    modules = modules_from_names(module_names)
    with_modules modules do |mod|
      Commands::PullCommand.new(@config).apply(mod)
    end
  end

  desc "restructure <module>...", "Change module(s) work directory structure to fit the Y2DIR scheme"
  def restructure(*module_names)
    modules = modules_from_names(module_names)
    with_modules modules do |mod|
      Commands::RestructureCommand.new(@config).apply(mod)
    end
  end

  desc "ybc <module>...", "Compile module(s) to ybc"
  def ybc(*module_names)
    report_results(module_names) do |mod|
      Commands::YbcCommand.new(@config).apply(mod)
    end
  end

  desc "ruby <module>...", "Convert module(s) to Ruby"
  def ruby(*module_names)
    report_results(module_names) do |mod|
      Commands::RubyCommand.new(@config).apply(mod)
    end
  end


  desc "makefile <module>...", "Generates Makefile.am for exported dirs of module(s)"
  def makefile(*module_names)
    modules = modules_from_names(module_names)
    with_modules modules do |mod|
      Commands::MakefileCommand.new(@config).apply(mod)
    end
  end

  desc "package <module>...", "Create packages in build service directory for module(s)"
  def package(*module_names)
    modules = modules_from_names(module_names)
    with_modules modules do |mod|
      Commands::PackageCommand.new(@config).apply(mod)
    end
  end

  private

  def report_results(module_names) # :yields: mod
    compile_stubs

    FileUtils.rm_rf(ERROR_FILE)

    counts = {
      :ok          => 0,
      :excluded    => 0,
      :error_ybc   => 0,
      :error_y2r   => 0,
      :error_ruby  => 0,
      :error_other => 0
    }

    modules = modules_from_names(module_names)
    with_modules modules do |mod|
      module_counts = yield(mod)
      counts.keys.each { |k| counts[k] += module_counts[k] }
    end

    Messages.info ""
    Messages.info "-----"
    Messages.info ""
    Messages.info "Total OK:           #{counts[:ok]}"
    Messages.info "Total EXCLUDED:     #{counts[:excluded]}"
    Messages.info "Total ERROR(ybc):   #{counts[:error_ybc]}"
    Messages.info "Total ERROR(y2r):   #{counts[:error_y2r]}"
    Messages.info "Total ERROR(ruby):  #{counts[:error_ruby]}"
    Messages.info "Total ERROR(other): #{counts[:error_other]}"

    error_counts = counts.values_at(
      :error_ybc,
      :error_y2r,
      :error_ruby,
      :error_other
    )
    exit 1 if error_counts.any?(&:nonzero?)
  end

  def compile_stubs
    Dir["#{STUBS_DIR}/*.ycp"].each do |file|
      Cheetah.run @config["ycpc"], "-c", file
    end
  end

  def load_config
    @config = YAML.load_file("#{BASE_DIR}/config.yml")
  end

  def load_module_data
    Dir["#{DATA_DIR}/*.yml"].sort.each do |file|
      name = File.basename(file, ".yml")

      $yast_modules[name] = YastModule.new(
        name,
        YAML.load_file(file) || {},
        @config
      )
    end
  end

  def module_from_cwd
    cwd = Dir.pwd
    # .../work/foo
    package = cwd[/\/#{Regexp.escape(YastModule::WORK_DIR)}\/([^\/]+)\Z/, 1]
    raise "No modules specified and current directory is not a working directory" unless package
    package
  end

  def modules_from_names(module_names)
    module_names = [ module_from_cwd ] if module_names.empty?
    module_names = $yast_modules.keys if module_names == ["all"]

    res = TSorter.sort($yast_modules.values_at(*module_names)) { |m| m.ybc_deps }
    # select only required modules
    res.select { |m| module_names.include? m.name }
  end

  def with_modules(modules) # :yields: mod
    max_counter_size = 3 + ((Math.log10(modules.size).to_i + 1) * 2)

    modules.each_index do |i|
      Messages.info sprintf(
        "%-#{max_counter_size}s %s",
        "[#{i + 1}/#{modules.size}]",
        "Processing #{modules[i].name}:\n"
      )

      yield modules[i]
    end
  end
end

begin
  CLI.start(ARGV)
rescue Cheetah::ExecutionFailed => e
  Messages.info ""
  Messages.info "Command #{e.commands[0][0]} failed:"
  Messages.info e.stderr
  exit 1
rescue Interrupt
  puts # ^C is printed already
rescue Exception
  Messages.info $!
  exit 1
end
