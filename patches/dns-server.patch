diff --git a/agents/Makefile.am b/agents/Makefile.am
index dc803c8..e69de29 100644
--- a/agents/Makefile.am
+++ b/agents/Makefile.am
@@ -1,15 +0,0 @@
-#
-# Makefile.am for devtools/devtools/skeletons/config/agents
-#
-
-agent_SCRIPTS =		ag_dns_zone	\
-			ag_named_forwarders	\
-			ag_convert_named_conf
-
-scrconf_DATA =		dns_zone.scr	\
-			dns_named.scr	\
-			cfg_named.scr	\
-			named_forwarders.scr	\
-			convert_named_conf.scr
-
-EXTRA_DIST = $(agent_SCRIPTS) $(scrconf_DATA)
diff --git a/doc/autodocs/Makefile.am b/doc/autodocs/Makefile.am
index 2c8851b..e0759d7 100644
--- a/doc/autodocs/Makefile.am
+++ b/doc/autodocs/Makefile.am
@@ -1,5 +1,6 @@
 #
 # Makefile.am for pam/doc/autodocs
 #
-
-include $(top_srcdir)/autodocs-ycp.ami
+# TODO
+# FIXME disabled autodocs temporarily
+# include $(top_srcdir)/autodocs-ycp.ami
diff --git a/src/include/dns-server/dialog-installwizard.ycp b/src/include/dns-server/dialog-installwizard.ycp
index 67a7831..0f622a6 100644
--- a/src/include/dns-server/dialog-installwizard.ycp
+++ b/src/include/dns-server/dialog-installwizard.ycp
@@ -19,7 +19,9 @@ import "Label";
 import "CWM";
 import "Wizard";
 import "CWMFirewallInterfaces";
-import "DnsServer";
+import "DnsServerUI";
+
+include "dns-server/dialog-main.ycp";
 
 symbol runInstallWizardForwardersDialog () {
     string caption =
@@ -112,7 +114,7 @@ symbol runInstallWizardZonesDialog () {
 	   integer index = (integer)
 		UI::QueryWidget (`id ("zones_list_table"), `CurrentItem);
 	    DnsServer::SelectZone (index);
-	    current_zone = DnsServer::FetchCurrentZone ();
+      DnsServerUI::current_zone = DnsServer::FetchCurrentZone ();
 	    ret = `edit_zone;
 	    break;
 	}
@@ -144,7 +146,7 @@ symbol runInstallWizardFinishDialog () {
 
 
     ReadForwarders ();
-    string fw = mergestring (forwarders, ", ");
+    string fw = mergestring (DnsServerUI::forwarders, ", ");
     list<map > zones = DnsServer::FetchZones ();
     list<string> zn = maplist (map z, zones, ``(z["zone"]:""));
     string zl = mergestring (zn, ", ");
diff --git a/src/include/dns-server/dialog-main.ycp b/src/include/dns-server/dialog-main.ycp
index 02ebf85..8bb0a1d 100644
--- a/src/include/dns-server/dialog-main.ycp
+++ b/src/include/dns-server/dialog-main.ycp
@@ -13,6 +13,7 @@
 textdomain "dns-server";
 
 import "DnsServer";
+import "DnsServerUI";
 import "IP";
 import "Hostname";
 import "Popup";
@@ -38,6 +39,10 @@ import "DnsServer";
 import "DnsServerHelperFunctions";
 import "String";
 
+include "dns-server/misc.ycp";
+include "dns-server/dialog-masterzone.ycp";
+include "dns-server/helps.ycp";
+
 /* String defines the initial screen for the expert dialog */
 string initial_screen = "start_up";
 
@@ -107,11 +112,11 @@ void UpdateServiceStatusWidget () {
 	UI::ChangeWidget (`id ("start_dns_now"), `Enabled, ! status);
 	UI::ChangeWidget (`id ("stop_dns_now"), `Enabled, status);
 	UI::ReplaceWidget (`id ("service_status_rp"),
-	    `Label (status
+	    `Label (status ?
 		// service sttus - label
-		? _("DNS server is running.")
+		_("DNS server is running.") :
 		// service sttus - label
-		: _("DNS server is not running.")
+		_("DNS server is not running.")
 	    )
 	);
     }
@@ -277,29 +282,29 @@ void RedrawForwardersListWidget () {
 	`SelectionBox ( `id ( "forwarders_list" ), `opt ( `hstretch ),
 	    // Selectionbox for listing current DNS-Forwarders
 	    _("Forwarder &List"),
-	    forwarders));
+	    DnsServerUI::forwarders));
     boolean enabled = ( `nomodify != (symbol)
       UI::QueryWidget(`id("forwarder_policy"), `Value));
     UI::ChangeWidget (`id ("forwarders_delete_ip_address"),
-	`Enabled, forwarders != [] && enabled );
+	`Enabled, DnsServerUI::forwarders != [] && enabled );
     UI::ChangeWidget (`id ("forwarders_list"),`Enabled, enabled );
-    if (forwarders != [] && enabled)
+    if (DnsServerUI::forwarders != [] && enabled)
     {
 	UI::ChangeWidget (`id ("forwarders_list"),
-	    `CurrentItem, forwarders[0]:"");
+	    `CurrentItem, DnsServerUI::forwarders[0]:"");
     }
 }
 
 void ReadForwarders () {
-    list<map<string,any> > options = DnsServer::GetGlobalOptions ();
-    foreach (map<string,any> o, options, {
+    list<map<string,any> > DnsServerUI::options = DnsServer::GetGlobalOptions ();
+    foreach (map<string,any> o, DnsServerUI::options, {
 	if (o["key"]:"" == "forwarders")
 	{
-	    forwarders = splitstring (o["value"]:"", " ");
-	    forwarders = filter (string f, forwarders, ``(
+  DnsServerUI::forwarders = splitstring (o["value"]:"", " ");
+  DnsServerUI::forwarders = filter (string f, DnsServerUI::forwarders, ``(
 		! issubstring (f, "{") && ! issubstring (f, "}") && f != ""
 	    ));
-	    forwarders = maplist (string f, forwarders, {
+  DnsServerUI::forwarders = maplist (string f, DnsServerUI::forwarders, {
 		integer i = findfirstof (f, ";");
 		if (i != nil)
 		    f = substring (f, 0, i);
@@ -411,21 +416,21 @@ void StoreExpertForwardersPage (string key, map event) {
       DnsServer::SetNetconfigDNSPolicy( "" );
     }
 
-    list<map<string,any> > options = DnsServer::GetGlobalOptions ();
-    options = filter (map<string,any> o, options, {
+    list<map<string,any> > DnsServerUI::options = DnsServer::GetGlobalOptions ();
+    DnsServerUI::options = filter (map<string,any> o, DnsServerUI::options, {
 	return o["key"]:"" != "forwarders"/* && o["key"]:"" != "forward"*/;
     });
-    if (forwarders != [])
+    if (DnsServerUI::forwarders != [])
     {
-	string forwarders_str = mergestring (forwarders, "; ");
+	string forwarders_str = mergestring (DnsServerUI::forwarders, "; ");
 	forwarders_str = sformat ("{ %1; }", forwarders_str);
-	options = add (options, $[
+  DnsServerUI::options = add (DnsServerUI::options, $[
 	    "key" : "forwarders",
 	    "value" : forwarders_str,
 	]);
     }
 
-    DnsServer::SetGlobalOptions (options);
+    DnsServer::SetGlobalOptions (DnsServerUI::options);
 }
 
 /**
@@ -516,20 +521,20 @@ and colons.")
 	    if (new_addr == nil) return nil;
 	}
 
-	if (contains (forwarders, new_addr))
+	if (contains (DnsServerUI::forwarders, new_addr))
 	{
 	    // error report
 	    Report::Error (_("The specified forwarder is already present."));
 	    return nil;
 	}
-	forwarders = add (forwarders, new_addr);
+  DnsServerUI::forwarders = add (DnsServerUI::forwarders, new_addr);
     }
     else if (ret == "forwarders_delete_ip_address")
     {
 	string old_addr = (string)
 	    UI::QueryWidget (`id ("forwarders_list"), `CurrentItem);
 	y2error ("DA: %1", old_addr);
-	forwarders = filter (string f, forwarders, ``(f != old_addr));
+  DnsServerUI::forwarders = filter (string f, DnsServerUI::forwarders, ``(f != old_addr));
     }
     else if (ret == "forwarder_policy" ){
 	handlePolicy( (symbol) UI::QueryWidget( `id("forwarder_policy"), `Value));
@@ -822,7 +827,7 @@ term ExpertBasicOptionsDialog () {
 void ReinitializeOptionAddWidgets () {
     integer current_opt = (integer)
 	UI::QueryWidget (`id ("basic_options_table"), `CurrentItem);
-    map<string,any> o = options[current_opt]:$[];
+    map<string,any> o = DnsServerUI::options[current_opt]:$[];
     if (o == $[])
     {
 	UI::ChangeWidget (`id ("basic_option_value"), `Value, "");
@@ -839,16 +844,16 @@ void RedrawOptionsTableWidget () {
 	UI::QueryWidget (`id ("basic_options_table"), `CurrentItem);
     integer index = -1;
     UI::ChangeWidget (`id ("basic_options_table"), `Items,
-	maplist (map<string,any> o, options, {
+	maplist (map<string,any> o, DnsServerUI::options, {
 	    index = index + 1;
 	    return `item (`id (index), o["key"]:"", o["value"]:nil);
 	})
     );
-    if (current != nil && current < size (options))
+    if (current != nil && current < size (DnsServerUI::options))
     {
 	UI::ChangeWidget (`id ("basic_options_table"), `CurrentItem, current);
     }
-    UI::ChangeWidget (`id ("delete_basic_option"), `Enabled, size(options) > 0);
+    UI::ChangeWidget (`id ("delete_basic_option"), `Enabled, size(DnsServerUI::options) > 0);
     ReinitializeOptionAddWidgets ();
 }
 
@@ -857,8 +862,8 @@ void RedrawOptionsTableWidget () {
  */
 void InitExpertBasicOptionsPage (string key) {
     SetDNSSErverIcon();
-    options = DnsServer::GetGlobalOptions ();
-    current_option_index = 0;
+    DnsServerUI::options = DnsServer::GetGlobalOptions ();
+    DnsServerUI::current_option_index = 0;
     RedrawOptionsTableWidget ();
 }
 
@@ -866,7 +871,7 @@ void InitExpertBasicOptionsPage (string key) {
  * Store settings of a tab of a dialog
  */
 void StoreExpertBasicOptionsPage (string key, map event) {
-    DnsServer::SetGlobalOptions (options);
+    DnsServer::SetGlobalOptions (DnsServerUI::options);
 }
 
 /**
@@ -881,12 +886,13 @@ boolean IsUniqueOption (string option) {
  * Returns if the option was set yet
  */
 boolean OptionIsSetYet (string option) {
-    if (size(
+    if (
+    // options are list, size returns count of records
+    size(
 	// filters all records whith key = option
-	filter (map<string, any> option_record, options,
+	filter (map<string, any> option_record, DnsServerUI::options,
 	    ``(option_record["key"]:nil == option)
 	)
-    // options are list, size returns count of records
     ) >0 ) {
 	return true;
     }
@@ -1002,8 +1008,8 @@ symbol HandleExpertBasicOptionsPage (string key, map event) {
 	    return nil;
 	}
 
-	options[index] = nil;
-	options = filter (map<string,any> o, options, ``(o != nil));
+  DnsServerUI::options[index] = nil;
+  DnsServerUI::options = filter (map<string,any> o, DnsServerUI::options, ``(o != nil));
 	RedrawOptionsTableWidget ();
 	return nil;
     }
@@ -1028,7 +1034,7 @@ Really add another one?
 	    y2warning("Added unique option '%1' more times", current_key);
 	}
 
-	options = add (options, $[
+  DnsServerUI::options = add (DnsServerUI::options, $[
 	    "key" : current_key,
 	    "value" : current_value,
 	]);
@@ -1040,8 +1046,8 @@ Really add another one?
 	// testing options for right values
 	if (! CheckOptionValue(current_key, current_value)) return nil;
 
-	options[index, "key"] = current_key;
-	options[index, "value"] = current_value;
+  DnsServerUI::options[index, "key"] = current_key;
+  DnsServerUI::options[index, "value"] = current_value;
 	RedrawOptionsTableWidget ();
 	return nil;
     }
@@ -1298,7 +1304,7 @@ term Expert_ACLs_Dialog () {
 
 void RedrawAclPage () {
     integer index = -1;
-    list items = maplist (string a, acl, {
+    list items = maplist (string a, DnsServerUI::acl, {
 	index = index + 1;
 	while (substring (a, 0, 1) == " " || substring (a, 0, 1) == "\t")
 	    a = substring (a, 1);
@@ -1318,7 +1324,7 @@ void RedrawAclPage () {
  */
 void InitExpertAclPage (string key) {
     SetDNSSErverIcon();
-    acl = DnsServer::GetAcl ();
+    DnsServerUI::acl = DnsServer::GetAcl ();
     UI::ChangeWidget (`id ("new_acl_name"), `ValidChars,
 	"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-");
     RedrawAclPage ();
@@ -1328,7 +1334,7 @@ void InitExpertAclPage (string key) {
  * Store settings of a tab of a dialog
  */
 void StoreExpertAclPage (string key, map event) {
-   DnsServer::SetAcl (acl);
+   DnsServer::SetAcl (DnsServerUI::acl);
 }
 
 /**
@@ -1336,7 +1342,7 @@ void StoreExpertAclPage (string key, map event) {
  * @returns true if the name is duplicate
  */
 boolean IsAclDefined (string new_name, list<string> acls) {
-    if (foreach (string acl, acls, {
+    if (foreach (string DnsServerUI::acl, acls, {
 	list<string> splitted = splitstring (acl, " \t");
 	if (new_name == splitted[0]:"") return true;
     }) == true) {
@@ -1395,7 +1401,7 @@ symbol HandleExpertAclPage (string key, map event) {
 	`CurrentItem);
     if (ret == "delete_acl")
     {
-	string a = acl[index]:"";
+	string a = DnsServerUI::acl[index]:"";
 	while (substring (a, 0, 1) == " " || substring (a, 0, 1) == "\t")
 	    a = substring (a, 1);
 	list<string> s = splitstring (a, " \t");
@@ -1422,8 +1428,8 @@ symbol HandleExpertAclPage (string key, map event) {
 	});
 	DnsServer::StoreZones (zones);
 
-	acl[index] = nil;
-	acl = filter (string a, acl, ``(a != nil));
+  DnsServerUI::acl[index] = nil;
+  DnsServerUI::acl = filter (string a, DnsServerUI::acl, ``(a != nil));
 	RedrawAclPage ();
     }
     else if (ret == "add_acl")
@@ -1460,7 +1466,7 @@ symbol HandleExpertAclPage (string key, map event) {
 		v = v + " }";
 	    }
 	    // testing for ACL duplicity
-	    if (IsAclDefined (n, acl))
+	    if (IsAclDefined (n, DnsServerUI::acl))
 	    {
 		UI::SetFocus(`id ("new_acl_name") );
 		// An error popup message
@@ -1468,7 +1474,7 @@ symbol HandleExpertAclPage (string key, map event) {
 	    }
 	    else
 	    {
-		acl = add (acl, sformat ("%1 %2", n, v));
+        DnsServerUI::acl = add (DnsServerUI::acl, sformat ("%1 %2", n, v));
 		RedrawAclPage ();
 	    }
 	}
@@ -1554,7 +1560,7 @@ term ExpertZonesDialog () {
 
 void RedrawZonesListWidget () {
     // Translating of all zone names at once
-    list <string> encoded_zone_names = maplist (map z, zones, {
+    list <string> encoded_zone_names = maplist (map z, DnsServerUI::zones, {
 	return z["zone"]:"";
     });
     list <string> decoded_zone_names = Punycode::DocodeDomainNames(encoded_zone_names);
@@ -1566,7 +1572,7 @@ void RedrawZonesListWidget () {
     });
 
     index = -1;
-    list <term> items = maplist (map z, zones, ``{
+    list <term> items = maplist (map z, DnsServerUI::zones, ``{
 	index = index + 1;
 	string zone_name = z["zone"]:"";
 
@@ -1593,7 +1599,9 @@ void RedrawZonesListWidget () {
 		// TRANSLATORS: Table item - Server type
 		type_trans = _("Forward");
 		break;
-	    y2warning("Unknown zone type %1", type_trans);
+            default:
+                y2warning("Unknown zone type %1", type_trans);
+                break;
 	}
 
 	return `item (`id (index), enc_to_dec[zone_name]:zone_name, type_trans);
@@ -1616,7 +1624,7 @@ void RedrawZonesListWidget () {
  */
 void InitExpertZonesPage (string key) {
     SetDNSSErverIcon();
-    zones = DnsServer::FetchZones ();
+    DnsServerUI::zones = DnsServer::FetchZones ();
     RedrawZonesListWidget ();
 }
 
@@ -1660,9 +1668,9 @@ symbol HandleExpertZonesPage (string key, map event) {
 	// Confirm deleting zone
 	if (!Confirm::DeleteSelected()) return nil;
 
-	zones[index] = nil;
-	zones = filter (map z, zones, ``(z != nil));
-	DnsServer::StoreZones (zones);
+  DnsServerUI::zones[index] = nil;
+  DnsServerUI::zones = filter (map z, DnsServerUI::zones, ``(z != nil));
+	DnsServer::StoreZones (DnsServerUI::zones);
 	RedrawZonesListWidget ();
 	return nil;
     }
@@ -1700,7 +1708,7 @@ symbol HandleExpertZonesPage (string key, map event) {
 	    return nil;
 	}
 
-	list<map> zones_same = filter (map z, zones, {
+	list<map> zones_same = filter (map z, DnsServerUI::zones, {
 	    return z["zone"]:"" == encoded_zone_name;
 	});
 	if (size (zones_same) != 0)
@@ -1711,7 +1719,7 @@ symbol HandleExpertZonesPage (string key, map event) {
 	    return nil;
 	}
 
-	DnsServer::StoreZones (zones);
+	DnsServer::StoreZones (DnsServerUI::zones);
 	DnsServer::SelectZone (-1);
 	map<string,any> z = DnsServer::FetchCurrentZone ();
 	z = (map<string,any>)union (z, $[
@@ -1722,13 +1730,13 @@ symbol HandleExpertZonesPage (string key, map event) {
 	y2milestone ("Created zone: %1 (%2)", z, zone_name);
 	DnsServer::StoreCurrentZone (z);
 	DnsServer::StoreZone ();
-	zones = DnsServer::FetchZones ();
+  DnsServerUI::zones = DnsServer::FetchZones ();
 	RedrawZonesListWidget ();
 
 	// fixing bug #45950, slave zone _MUST_ have master server
 	if (zone_type == "slave") {
-	    DnsServer::SelectZone (size(zones)-1);
-	    current_zone = DnsServer::FetchCurrentZone ();
+	    DnsServer::SelectZone (size(DnsServerUI::zones)-1);
+      DnsServerUI::current_zone = DnsServer::FetchCurrentZone ();
 	    return `edit_zone;
 	}
     }
@@ -1737,7 +1745,7 @@ symbol HandleExpertZonesPage (string key, map event) {
 	// next time, the initial screen will be "zones"
 	initial_screen = "zones";
 	DnsServer::SelectZone (index);
-	current_zone = DnsServer::FetchCurrentZone ();
+  DnsServerUI::current_zone = DnsServer::FetchCurrentZone ();
 	return `edit_zone;
     }
 
diff --git a/src/include/dns-server/dialog-masterzone.ycp b/src/include/dns-server/dialog-masterzone.ycp
index 7e1ef7f..bee6d28 100644
--- a/src/include/dns-server/dialog-masterzone.ycp
+++ b/src/include/dns-server/dialog-masterzone.ycp
@@ -28,9 +28,12 @@ import "Report";
 import "DnsServerAPI";
 import "Punycode";
 import "DnsServer";
+import "DnsServerUI";
 import "DnsServerHelperFunctions";
 
 include "dns-server/misc.ycp";
+include "dns-server/helps.ycp";
+include "dns-server/dialogs.ycp";
 
 // zone ACL -->
 
@@ -82,7 +85,7 @@ term GetMasterZoneEditorTabBasics () {
 
     available_zones_to_connect = [];
     string zone_name = "";
-    list <term> zones_to_connect = maplist (map z, zones, {
+    list <term> zones_to_connect = maplist (map z, DnsServerUI::zones, {
 	zone_name = z["zone"]:"";
 
 	// zone must be: reverse, not-internal, master
@@ -97,8 +100,8 @@ term GetMasterZoneEditorTabBasics () {
 	return (one_zone != nil);
     }));
 
-    list <string> zones_connected = DnsServer::GetWhichZonesAreConnectedWith (current_zone["zone"]:"");
-    y2milestone ("Connected with zone %1: %2", current_zone["zone"]:"", zones_connected);
+    list <string> zones_connected = DnsServer::GetWhichZonesAreConnectedWith (DnsServerUI::current_zone["zone"]:"");
+    y2milestone ("Connected with zone %1: %2", DnsServerUI::current_zone["zone"]:"", zones_connected);
 
     term contents = `VBox (
 	expert_settings,
@@ -114,7 +117,7 @@ term GetMasterZoneEditorTabBasics () {
 	),
 	`VSpacing (1),
 	// Reverse zones can be automatically generated
-	(DnsServerHelperFunctions::IsReverseZone (current_zone["zone"]:"") == true ?
+	(DnsServerHelperFunctions::IsReverseZone (DnsServerUI::current_zone["zone"]:"") == true ?
 	    `Left (
 		`CheckBoxFrame (
 		    `id ("generate_from_forward_zone"), `opt (`notify),
@@ -153,7 +156,7 @@ term GetMasterZoneEditorTabBasics () {
 void ZoneAclInit () {
     boolean allowed = false;
     list<string> keys = [];
-    foreach (map m, current_zone["options"]:[], ``{
+    foreach (map m, DnsServerUI::current_zone["options"]:[], ``{
         if (m["key"]:"" == "allow-transfer" && ! allowed)
         {
             string key = regexpsub (
@@ -191,9 +194,9 @@ void ZoneAclInit () {
 }
 
 void ZoneConnectedWithInit () {
-    if (DnsServerHelperFunctions::IsReverseZone (current_zone["zone"]:"") == true) {
-	if (current_zone["connected_with"]:"" != "" && contains (available_zones_to_connect, current_zone["connected_with"]:"")) {
-	    UI::ChangeWidget (`id ("generate_from_forward_zone_sel"), `Value, current_zone["connected_with"]:"");
+    if (DnsServerHelperFunctions::IsReverseZone (DnsServerUI::current_zone["zone"]:"") == true) {
+	if (DnsServerUI::current_zone["connected_with"]:"" != "" && contains (available_zones_to_connect, DnsServerUI::current_zone["connected_with"]:"")) {
+	    UI::ChangeWidget (`id ("generate_from_forward_zone_sel"), `Value, DnsServerUI::current_zone["connected_with"]:"");
 	    UI::ChangeWidget (`id ("generate_from_forward_zone"), `Value, true);
 	} else {
 	    UI::ChangeWidget (`id ("generate_from_forward_zone"), `Value, false);
@@ -202,7 +205,7 @@ void ZoneConnectedWithInit () {
 }
 
 void ZoneAclStore () {
-    current_zone["options"] = maplist (map m, current_zone["options"]:[], ``{
+  DnsServerUI::current_zone["options"] = maplist (map m, DnsServerUI::current_zone["options"]:[], ``{
         if (m["key"]:"" == "allow-transfer"
             && regexpmatch (m["value"]:"", "^.*\\{[ \t]*(.*)[ \t]*\\}.*$"))
         {
@@ -210,7 +213,7 @@ void ZoneAclStore () {
         }
         return m;
     });
-    current_zone["options"] = filter (map m, current_zone["options"]:[], ``(
+  DnsServerUI::current_zone["options"] = filter (map m, DnsServerUI::current_zone["options"]:[], ``(
         m != $[]
     ));
     list<string> keys = (list<string>)
@@ -236,8 +239,8 @@ void ZoneAclStore () {
 
     // store either "none" (transfer disabled) or "all" (transfer enabled)
     // or selected ACLs (transfer enabled for selected ACLs)
-    current_zone["options"] = add (
-	current_zone["options"]:[], $[
+    DnsServerUI::current_zone["options"] = add (
+	DnsServerUI::current_zone["options"]:[], $[
     	    "key" : "allow-transfer",
     	    "value" : sformat ("{ %1; }", mergestring (keys, "; ")),
 	]
@@ -245,15 +248,15 @@ void ZoneAclStore () {
 }
 
 void ZoneConnectedWithStore () {
-    if (DnsServerHelperFunctions::IsReverseZone (current_zone["zone"]:"")) {
+    if (DnsServerHelperFunctions::IsReverseZone (DnsServerUI::current_zone["zone"]:"")) {
 	if ((boolean) UI::QueryWidget (`id ("generate_from_forward_zone"), `Value) == true) {
-	    current_zone["connected_with"] = (string) UI::QueryWidget (`id ("generate_from_forward_zone_sel"), `Value);
+    DnsServerUI::current_zone["connected_with"] = (string) UI::QueryWidget (`id ("generate_from_forward_zone_sel"), `Value);
 
 	} else {
-	    current_zone["connected_with"] = "";
+    DnsServerUI::current_zone["connected_with"] = "";
 	}
 
-	y2milestone ("Zone '%1' connected with '%2'", current_zone["zone"]:"", current_zone["connected_with"]:"");
+	y2milestone ("Zone '%1' connected with '%2'", DnsServerUI::current_zone["zone"]:"", DnsServerUI::current_zone["connected_with"]:"");
     }
 }
 
@@ -275,7 +278,7 @@ void InitZoneBasicsTab () {
 
     boolean allowed = false;
     string key = nil;
-    foreach (map m, current_zone["options"]:[], ``{
+    foreach (map m, DnsServerUI::current_zone["options"]:[], ``{
         if (m["key"]:"" == "allow-update" && ! allowed)
         {
             key = regexpsub (
@@ -305,7 +308,7 @@ void InitZoneBasicsTab () {
  * Store settings of a tab of a dialog
  */
 void StoreZoneBasicsTab () {
-    current_zone["options"] = maplist (map m, current_zone["options"]:[], ``{
+  DnsServerUI::current_zone["options"] = maplist (map m, DnsServerUI::current_zone["options"]:[], ``{
         if (m["key"]:"" == "allow-update"
             && regexpmatch (m["value"]:"", "^.*key[ \t]+[^ \t;]+[ \t;]+.*$"))
         {
@@ -313,7 +316,7 @@ void StoreZoneBasicsTab () {
         }
         return m;
     });
-    current_zone["options"] = filter (map m, current_zone["options"]:[], ``(
+  DnsServerUI::current_zone["options"] = filter (map m, DnsServerUI::current_zone["options"]:[], ``(
         m != $[]
     ));
 
@@ -321,7 +324,7 @@ void StoreZoneBasicsTab () {
 	string key = (string)UI::QueryWidget (`id ("ddns_key"), `Value);
 	boolean allowed = (boolean)UI::QueryWidget (`id ("allow_ddns"), `Value);
 	if (allowed) {
-    	    current_zone["options"] = add (current_zone["options"]:[], $[
+    DnsServerUI::current_zone["options"] = add (DnsServerUI::current_zone["options"]:[], $[
         	"key" : "allow-update",
         	"value" : sformat ("{ key %1; }", key),
     	    ]);
@@ -414,7 +417,7 @@ void RedrawNsListWidget () {
 		`id ("name_server_list"),
     		// selection box label
 		_("Na&me Server List"),
-    		Punycode::DocodeDomainNames(current_zone_ns)
+    		Punycode::DocodeDomainNames(DnsServerUI::current_zone_ns)
 	    )
 	);
 }
@@ -427,15 +430,15 @@ void RedrawNsListWidget () {
 //}
 
 void RegenerateCurrentZoneNS () {
-    string zone_name = current_zone["zone"]:"";
-    list<map> records = filter (map r, (list<map>)(current_zone["records"]:[]), ``(
+    string zone_name = DnsServerUI::current_zone["zone"]:"";
+    list<map> records = filter (map r, (list<map>)(DnsServerUI::current_zone["records"]:[]), ``(
         r["type"]:"" == "NS"
         && (r["key"]:"" == sformat ("%1.", zone_name)
 	    || r["key"]:"" == "@")
     ));
-    current_zone_ns = maplist (map r, records, ``(r["value"]:""));
-    current_zone_ns = filter (string z, current_zone_ns, ``(z != ""));
-    y2milestone ("NSs: %1", current_zone_ns);
+    DnsServerUI::current_zone_ns = maplist (map r, records, ``(r["value"]:""));
+    DnsServerUI::current_zone_ns = filter (string z, DnsServerUI::current_zone_ns, ``(z != ""));
+    y2milestone ("NSs: %1", DnsServerUI::current_zone_ns);
 }
 
 /**
@@ -451,21 +454,21 @@ void InitNsListTab () {
  * Store settings of a tab of a dialog
  */
 void StoreNsListTab () {
-    string zone_name = current_zone["zone"]:"";
-    list records = filter (map r, current_zone["records"]:[], ``(
+    string zone_name = DnsServerUI::current_zone["zone"]:"";
+    list records = filter (map r, DnsServerUI::current_zone["records"]:[], ``(
 	! (r["type"]:"" == "NS"
 	&& (r["key"]:"" == sformat ("%1.", zone_name)
 	    || r["key"]:"" == zone_name
 	    || r["key"]:"" == "@"))
     ));
-    list new_rec = maplist (string a, current_zone_ns, ``(
+    list new_rec = maplist (string a, DnsServerUI::current_zone_ns, ``(
 	$[
 	    "key" : sformat ("%1.", zone_name),
 	    "type" : "NS",
 	    "value" : a,
 	]
     ));
-    current_zone["records"] = merge (new_rec, records);
+    DnsServerUI::current_zone["records"] = merge (new_rec, records);
 }
 
 /**
@@ -476,7 +479,7 @@ symbol HandleNsListTab (map event) {
 
     if (ret == "add_ns")
     {
-	string zn = current_zone["zone"]:"" + ".";
+	string zn = DnsServerUI::current_zone["zone"]:"" + ".";
 
 	// NS is converted to the Punycode first
 	string new_ns_entered = (string)
@@ -505,7 +508,7 @@ symbol HandleNsListTab (map event) {
 	{
 	    new_ns = sformat ("%1.%2", new_ns, zn);
 	}
-	if (contains (current_zone_ns, new_ns))
+	if (contains (DnsServerUI::current_zone_ns, new_ns))
 	{
 	    UI::SetFocus (`id ("add_name_server") );
 	    // error message
@@ -513,21 +516,21 @@ symbol HandleNsListTab (map event) {
 	    return nil;
 	}
 	
-	DnsServerHelperFunctions::HandleNsupdate ($["type":"NS", "key":zn, "value":new_ns], "add", current_zone);
+	DnsServerHelperFunctions::HandleNsupdate ($["type":"NS", "key":zn, "value":new_ns], "add", DnsServerUI::current_zone);
 
-	current_zone_ns = add (current_zone_ns, new_ns);
+  DnsServerUI::current_zone_ns = add (DnsServerUI::current_zone_ns, new_ns);
 	RedrawNsListWidget ();
     }
     else if (ret == "delete_ns")
     {
 	string selected = (string)
 	    UI::QueryWidget (`id ("name_server_list"), `CurrentItem);
-	current_zone_ns
-	    = filter (string ns, current_zone_ns, ``(ns != selected));
+  DnsServerUI::current_zone_ns
+	    = filter (string ns, DnsServerUI::current_zone_ns, ``(ns != selected));
 	RedrawNsListWidget ();
 
-	string zn = current_zone["zone"]:"" + ".";
-	DnsServerHelperFunctions::HandleNsupdate ($["type":"NS", "key":zn, "value":selected], "delete", current_zone);
+	string zn = DnsServerUI::current_zone["zone"]:"" + ".";
+	DnsServerHelperFunctions::HandleNsupdate ($["type":"NS", "key":zn, "value":selected], "delete", DnsServerUI::current_zone);
     }
     return nil;
 }
@@ -595,7 +598,7 @@ term GetMasterZoneEditorTabMailServers () {
 }
 
 void RedrawMxListWidget () {
-    list <string> zone_mx_decoded = Punycode::DocodeDomainNames(current_zone_mx);
+    list <string> zone_mx_decoded = Punycode::DocodeDomainNames(DnsServerUI::current_zone_mx);
 
     integer index = -1;
     // create term items using already translated strings
@@ -627,14 +630,14 @@ void RedrawMxListWidget () {
  * Initialize the tab of the dialog
  */
 void InitMxListTab () {
-    string zone_name = current_zone["zone"]:"";
-    list<map> records = filter (map r, (list<map>)(current_zone["records"]:[]), ``(
+    string zone_name = DnsServerUI::current_zone["zone"]:"";
+    list<map> records = filter (map r, (list<map>)(DnsServerUI::current_zone["records"]:[]), ``(
         r["type"]:"" == "MX"
         && (r["key"]:"" == sformat ("%1.", zone_name)
 	    || r["key"]:"" == "@")
     ));
-    current_zone_mx = maplist (map r, records, ``(r["value"]:""));
-    current_zone_mx = filter (string z, current_zone_mx, ``(z != ""));
+    DnsServerUI::current_zone_mx = maplist (map r, records, ``(r["value"]:""));
+    DnsServerUI::current_zone_mx = filter (string z, DnsServerUI::current_zone_mx, ``(z != ""));
 
     RedrawMxListWidget ();
 }
@@ -643,21 +646,21 @@ void InitMxListTab () {
  * Store settings of a tab of a dialog
  */
 void StoreMxListTab () {
-    string zone_name = current_zone["zone"]:"";
-    list records = filter (map r, current_zone["records"]:[], ``(
+    string zone_name = DnsServerUI::current_zone["zone"]:"";
+    list records = filter (map r, DnsServerUI::current_zone["records"]:[], ``(
 	! (r["type"]:"" == "MX"
 	&& (r["key"]:"" == sformat ("%1.", zone_name)
 	    || r["key"]:"" == zone_name
 	    || r["key"]:"" == "@"))
     ));
-    list new_rec = maplist (string a, current_zone_mx, ``(
+    list new_rec = maplist (string a, DnsServerUI::current_zone_mx, ``(
 	$[
 	    "key" : sformat ("%1.", zone_name),
 	    "type" : "MX",
 	    "value" : a,
 	]
     ));
-    current_zone["records"] = merge (new_rec, records);
+    DnsServerUI::current_zone["records"] = merge (new_rec, records);
 }
 
 /**
@@ -679,7 +682,7 @@ symbol HandleMxListTab (map event) {
 	    UI::ChangeWidget (`id ("add_priority"), `Value, 65535);
 	}
 
-	string zn = current_zone["zone"]:"" + ".";
+	string zn = DnsServerUI::current_zone["zone"]:"" + ".";
 
 	string check_mx = new_mx;
 	if (regexpmatch (check_mx, "^.*\\.$"))
@@ -704,7 +707,7 @@ symbol HandleMxListTab (map event) {
 	    new_mx = sformat ("%1.%2", new_mx, zn);
 	}
 
-	list<string> mx_list_check = filter (string mx, current_zone_mx, {
+	list<string> mx_list_check = filter (string mx, DnsServerUI::current_zone_mx, {
 	    list<string> split = splitstring (mx, " \t");
 	    split = filter (string s, split, ``(s != ""));
 	    string address = split[1]:"";
@@ -721,23 +724,23 @@ symbol HandleMxListTab (map event) {
 	new_mx = sformat ("%1 %2", prio, new_mx);
 	y2milestone("New MX: %1", new_mx);
 	
-	DnsServerHelperFunctions::HandleNsupdate($["type":"MX", "key":zn, "value":new_mx], "add", current_zone);
+	DnsServerHelperFunctions::HandleNsupdate($["type":"MX", "key":zn, "value":new_mx], "add", DnsServerUI::current_zone);
 
-	current_zone_mx = add (current_zone_mx, new_mx);
+  DnsServerUI::current_zone_mx = add (DnsServerUI::current_zone_mx, new_mx);
 	RedrawMxListWidget ();
     }
     else if (ret == "delete_mx")
     {
 	integer selected = (integer)
 	    UI::QueryWidget (`id ("mail_server_list"), `CurrentItem);
-	string selected_value = current_zone_mx[selected]:"";
-	current_zone_mx[selected] = nil;
-	current_zone_mx
-	    = filter (string mx, current_zone_mx, ``(mx != nil));
+	string selected_value = DnsServerUI::current_zone_mx[selected]:"";
+  DnsServerUI::current_zone_mx[selected] = nil;
+  DnsServerUI::current_zone_mx
+	    = filter (string mx, DnsServerUI::current_zone_mx, ``(mx != nil));
 	RedrawMxListWidget ();
 	
-	string zn = current_zone["zone"]:"" + ".";
-	DnsServerHelperFunctions::HandleNsupdate ($["type":"MX", "key":zn, "value":selected_value], "delete", current_zone);
+	string zn = DnsServerUI::current_zone["zone"]:"" + ".";
+	DnsServerHelperFunctions::HandleNsupdate ($["type":"MX", "key":zn, "value":selected_value], "delete", DnsServerUI::current_zone);
     }
     return nil;
 }
@@ -831,7 +834,7 @@ define string num2unit (string num) {
  */
 void InitSoaTab () {
     UI::ChangeWidget (`id ("zone_settings_serial"), `Value,
-	current_zone["soa", "serial"]:"");
+	DnsServerUI::current_zone["soa", "serial"]:"");
 
     map <string, string> map_ids_to_values = $[
 	"zone_settings_ttl"     : "ttl",
@@ -844,9 +847,9 @@ void InitSoaTab () {
     foreach (string id, string value, map_ids_to_values, {
 	integer time_int = 0;
 	if (id == "zone_settings_ttl") {
-	    time_int = DnsServerAPI::TimeToSeconds((string) current_zone[value]:"0S");
+	    time_int = DnsServerAPI::TimeToSeconds((string) DnsServerUI::current_zone[value]:"0S");
 	} else {
-	    time_int = DnsServerAPI::TimeToSeconds((string) current_zone["soa", value]:"0S");
+	    time_int = DnsServerAPI::TimeToSeconds((string) DnsServerUI::current_zone["soa", value]:"0S");
 	}
 	string time_str = DnsServerAPI::SecondsToHighestTimeUnit(time_int);
 	
@@ -861,39 +864,39 @@ void InitSoaTab () {
  * Store settings of a tab of a dialog
  */
 void StoreSoaTab () {
-    current_zone["ttl"] = sformat ("%1%2",
+  DnsServerUI::current_zone["ttl"] = sformat ("%1%2",
 	UI::QueryWidget (`id ("zone_settings_ttl_value"), `Value),
 	UI::QueryWidget (`id ("zone_settings_ttl_units"), `Value));
 
-    current_zone["soa"] = current_zone["soa"]:$[];
-    current_zone["soa", "serial"]
+  DnsServerUI::current_zone["soa"] = DnsServerUI::current_zone["soa"]:$[];
+  DnsServerUI::current_zone["soa", "serial"]
 	= UI::QueryWidget (`id ("zone_settings_serial"), `Value);
-    current_zone["soa", "refresh"] = sformat ("%1%2",
+  DnsServerUI::current_zone["soa", "refresh"] = sformat ("%1%2",
 	UI::QueryWidget (`id ("zone_settings_refresh_value"), `Value),
 	UI::QueryWidget (`id ("zone_settings_refresh_units"), `Value));
-    current_zone["soa", "retry"] = sformat ("%1%2",
+  DnsServerUI::current_zone["soa", "retry"] = sformat ("%1%2",
 	UI::QueryWidget (`id ("zone_settings_retry_value"), `Value),
 	UI::QueryWidget (`id ("zone_settings_retry_units"), `Value));
-    current_zone["soa", "expiry"] = sformat ("%1%2",
+  DnsServerUI::current_zone["soa", "expiry"] = sformat ("%1%2",
 	UI::QueryWidget (`id ("zone_settings_expiry_value"), `Value),
 	UI::QueryWidget (`id ("zone_settings_expiry_units"), `Value));
-    current_zone["soa", "minimum"] = sformat ("%1%2",
+  DnsServerUI::current_zone["soa", "minimum"] = sformat ("%1%2",
 	UI::QueryWidget (`id ("zone_settings_minimum_value"), `Value),
 	UI::QueryWidget (`id ("zone_settings_minimum_units"), `Value));
 
-    string zn = current_zone["zone"]:"" + ".";
-    current_zone["update_actions"] = add(current_zone["update_actions"]:[], $[
+    string zn = DnsServerUI::current_zone["zone"]:"" + ".";
+    DnsServerUI::current_zone["update_actions"] = add(DnsServerUI::current_zone["update_actions"]:[], $[
 	"operation"	: "add",
 	"type"		: "SOA",
 	"key"		: zn,
 	"value"		: (string)
-	    current_zone["soa", "server"]:"."		+ " " +
-	    current_zone["soa", "mail"]:"root."		+ " " +
-	    current_zone["soa", "serial"]:"1111111111"	+ " " +
-	    current_zone["soa", "refresh"]:"3h"		+ " " +
-	    current_zone["soa", "retry"]:"1h"		+ " " +
-	    current_zone["soa", "expiry"]:"1w"		+ " " +
-	    current_zone["soa", "minimum"]:"1d"		+ " ",
+	    DnsServerUI::current_zone["soa", "server"]:"."		+ " " +
+	    DnsServerUI::current_zone["soa", "mail"]:"root."		+ " " +
+	    DnsServerUI::current_zone["soa", "serial"]:"1111111111"	+ " " +
+	    DnsServerUI::current_zone["soa", "refresh"]:"3h"		+ " " +
+	    DnsServerUI::current_zone["soa", "retry"]:"1h"		+ " " +
+	    DnsServerUI::current_zone["soa", "expiry"]:"1w"		+ " " +
+	    DnsServerUI::current_zone["soa", "minimum"]:"1d"		+ " ",
     ]);
 }
 
@@ -1040,7 +1043,7 @@ term current_rr_rp = nil;
  */
 term GetMasterZoneEditorTabRecords () {
     // reverse zone
-    if (DnsServerHelperFunctions::IsReverseZone (current_zone["zone"]:"")) {
+    if (DnsServerHelperFunctions::IsReverseZone (DnsServerUI::current_zone["zone"]:"")) {
 	supported_records = [ "PTR", "NS" ];
     } else {
 	supported_records = [ "A", "AAAA", "CNAME", "NS", "MX", "SRV", "TXT" ];
@@ -1200,10 +1203,10 @@ void SwitchAndAdjustEditationWidgets (string & type, map current_record, string
 
 void RedrawZonesTable () {
     integer index = -1;
-    string zone_name = current_zone["zone"]:"";
+    string zone_name = DnsServerUI::current_zone["zone"]:"";
     string decoded_zone_name = Punycode::DecodeDomainName(zone_name);
 
-    list<integer> ret = maplist (map m, current_zone["records"]:[], {
+    list<integer> ret = maplist (map m, DnsServerUI::current_zone["records"]:[], {
 	index = index + 1;
 	if (m["type"]:"" == "TTL" || m["type"]:"" == "ORIGIN")
             return -1;
@@ -1223,14 +1226,14 @@ void RedrawZonesTable () {
 
     // keys
     list <string> decoded_names = maplist (integer r, ret, {
-	return current_zone["records", r, "key"]:"";
+	return DnsServerUI::current_zone["records", r, "key"]:"";
     });
 
     integer const_plus = size(decoded_names);
 
     // values
     foreach (string record, maplist (integer r, ret, {
-	    return current_zone["records", r, "value"]:"";
+	    return DnsServerUI::current_zone["records", r, "value"]:"";
     }), {
 	decoded_names = add (decoded_names, record);
     });
@@ -1240,16 +1243,16 @@ void RedrawZonesTable () {
     list items = maplist (integer r, ret, {
 	counter = counter + 1;
 
-	string record_type = current_zone["records", r, "type"]:"";
+	string record_type = DnsServerUI::current_zone["records", r, "type"]:"";
 
 	return `item (
 	    `id (r),
 	    DnsServerHelperFunctions::RRToRelativeName (
-		decoded_names[counter]:current_zone["records", r, "key"]:"", decoded_zone_name, record_type, "key"
+		decoded_names[counter]:DnsServerUI::current_zone["records", r, "key"]:"", decoded_zone_name, record_type, "key"
 	    ),
 	    record_type,
 	    DnsServerHelperFunctions::RRToRelativeName (
-		decoded_names[counter+const_plus]:current_zone["records", r, "value"]:"", decoded_zone_name, record_type, "value"
+		decoded_names[counter+const_plus]:DnsServerUI::current_zone["records", r, "value"]:"", decoded_zone_name, record_type, "value"
 	    )
 	);
     });
@@ -1274,7 +1277,7 @@ void RedrawZonesTable () {
     {
 	r = (integer) UI::QueryWidget (`id ("records_list"), `CurrentItem);
 
-	map current_record = current_zone["records", r]:$[];
+	map current_record = DnsServerUI::current_zone["records", r]:$[];
 	string current_type = current_record["type"]:"A";
 
 	SwitchAndAdjustEditationWidgets (current_type, current_record, decoded_zone_name, zone_name);
@@ -1428,7 +1431,7 @@ boolean CheckNewZoneRecordSyntax (map <string, string> record) {
 	    return false;
 	}
 
-	string zone_name = current_zone["zone"]:"" + ".";
+	string zone_name = DnsServerUI::current_zone["zone"]:"" + ".";
 
 	// IPv6 reverse zone
 	if (regexpmatch (zone_name, ".*\\.ip6\\.arpa\\.?$")) {
@@ -1561,7 +1564,7 @@ boolean CheckNewZoneRecordLogic (map <string, string> record) {
 // it ends with the current zone name
 string TransformRecord (string record) {
     string zone_regexp = mergestring (
-	splitstring (current_zone["zone"]:"", "."),
+	splitstring (DnsServerUI::current_zone["zone"]:"", "."),
 	"\\."
     );
 
@@ -1653,7 +1656,7 @@ void SwitchAndAdjustEditationWidgets (string & type, map current_record, string
  */
 symbol HandleZoneRecordsTab (map event) {
     any ret = event["ID"]:nil;
-    string zone_fqdn = current_zone["zone"]:"" + ".";
+    string zone_fqdn = DnsServerUI::current_zone["zone"]:"" + ".";
 
     integer r = (integer)  UI::QueryWidget (`id ("records_list"), `CurrentItem);
     // Currently selected type
@@ -1679,7 +1682,7 @@ symbol HandleZoneRecordsTab (map event) {
     integer record_weigh = 0;
     integer record_port = 0;
 
-    string zone = current_zone["zone"]:"";
+    string zone = DnsServerUI::current_zone["zone"]:"";
     string decoded_zone = Punycode::DecodeDomainName(zone);
 
     // Switch to new type of Editation dialog
@@ -1728,8 +1731,8 @@ symbol HandleZoneRecordsTab (map event) {
     if (ret == "records_list")
     {
 	// type might have changed
-	type = current_zone["records", r, "type"]:"";
-	SwitchAndAdjustEditationWidgets (type, current_zone["records", r]:$[], decoded_zone, zone);
+	type = DnsServerUI::current_zone["records", r, "type"]:"";
+	SwitchAndAdjustEditationWidgets (type, DnsServerUI::current_zone["records", r]:$[], decoded_zone, zone);
     }
 
     // Changing selected record
@@ -1739,14 +1742,14 @@ symbol HandleZoneRecordsTab (map event) {
 	    return nil;
 	}
 
-	DnsServerHelperFunctions::HandleNsupdate (current_zone["records", r]:$[], "delete", current_zone);
+	DnsServerHelperFunctions::HandleNsupdate (DnsServerUI::current_zone["records", r]:$[], "delete", DnsServerUI::current_zone);
 
-	current_zone["records", r, "key"]	= key;
-	current_zone["records", r, "type"]	= type;
-	current_zone["records", r, "value"]	= val;
+  DnsServerUI::current_zone["records", r, "key"]	= key;
+  DnsServerUI::current_zone["records", r, "type"]	= type;
+  DnsServerUI::current_zone["records", r, "value"]	= val;
 	RedrawZonesTable ();
 
-	DnsServerHelperFunctions::HandleNsupdate (current_zone["records", r]:$[], "add", current_zone);
+	DnsServerHelperFunctions::HandleNsupdate (DnsServerUI::current_zone["records", r]:$[], "add", DnsServerUI::current_zone);
     }
 
     // Adding new record
@@ -1761,10 +1764,10 @@ symbol HandleZoneRecordsTab (map event) {
 	    "type" : type,
 	    "value" : val,
 	];
-	current_zone["records"] = add (current_zone["records"]:[], rec);
+  DnsServerUI::current_zone["records"] = add (DnsServerUI::current_zone["records"]:[], rec);
 	RedrawZonesTable ();
 
-	DnsServerHelperFunctions::HandleNsupdate (rec, "add", current_zone);
+	DnsServerHelperFunctions::HandleNsupdate (rec, "add", DnsServerUI::current_zone);
     }
 
     // Removing selected record
@@ -1774,10 +1777,10 @@ symbol HandleZoneRecordsTab (map event) {
 	    return nil;
 	}
 
-	DnsServerHelperFunctions::HandleNsupdate (current_zone["records", r]:$[], "delete", current_zone);
+	DnsServerHelperFunctions::HandleNsupdate (DnsServerUI::current_zone["records", r]:$[], "delete", DnsServerUI::current_zone);
 
-	current_zone["records", r] = nil;
-	current_zone["records"] = filter (any r, current_zone["records"]:[], ``(
+  DnsServerUI::current_zone["records", r] = nil;
+  DnsServerUI::current_zone["records"] = filter (any r, DnsServerUI::current_zone["records"]:[], ``(
 	    r != nil
 	));
 	RedrawZonesTable ();
@@ -1920,7 +1923,7 @@ symbol runMasterZoneTabDialog () {
 	"records"		: "zone_editor_records",
     ];
 
-    string zone_name = current_zone["zone"]:"";
+    string zone_name = DnsServerUI::current_zone["zone"]:"";
     string zone_name_dec = Punycode::DecodeDomainName (zone_name);
     string current_tab = "basics";
 
@@ -2014,7 +2017,7 @@ string qwerty = _("Ad&vanced");
 	    }
 
 	    // at least one NS server must be set
-	    if (size (current_zone_ns) == 0) {
+	    if (size (DnsServerUI::current_zone_ns) == 0) {
 		y2warning ("At least one NS server must be set");
 		current_tab = "name_servers";
 		UI::ReplaceWidget (`tabContents, GetMasterZoneEditorTab ("name_servers"));
@@ -2055,7 +2058,7 @@ string qwerty = _("Ad&vanced");
 	    // Fake current tab if selected tab not allowed
 	    if (
 		// connected_with i set
-		current_zone["connected_with"]:"" != "" && current_zone["connected_with"]:nil != nil &&
+		DnsServerUI::current_zone["connected_with"]:"" != "" && DnsServerUI::current_zone["connected_with"]:nil != nil &&
 		// switching to forbidden tab
 		! contains (autogenerated_reverse_zone_allows, tostring (ret))
 	    ) {
@@ -2068,7 +2071,7 @@ string qwerty = _("Ad&vanced");
 		// Automatically Generate Records From is a feature that makes YaST to generate
 		// DNS records manually from selected zone
 		show_warning = sformat (_("Current zone records are automatically generated from %1 zone.
-To change records manually disable the Automatically Generate Records From feature."), current_zone["connected_with"]:"");
+To change records manually disable the Automatically Generate Records From feature."), DnsServerUI::current_zone["connected_with"]:"");
 	    }
 
 	    // Switch contents
@@ -2077,7 +2080,7 @@ To change records manually disable the Automatically Generate Records From featu
 	    if (current_tab == "records")
 	    {
 		string help_part2 = "zone_editor_records_forward";
-		if (DnsServerHelperFunctions::IsReverseZone (current_zone["zone"]:""))
+		if (DnsServerHelperFunctions::IsReverseZone (DnsServerUI::current_zone["zone"]:""))
 		    help_part2 = "zone_editor_records_reverse";
 
 		Wizard::RestoreHelp (
@@ -2119,13 +2122,13 @@ To change records manually disable the Automatically Generate Records From featu
     if (ret == `next)
     {
 	StoreMasterZoneTab (current_tab);
-	current_zone["modified"] = true;
-	DnsServer::StoreCurrentZone (current_zone);
+  DnsServerUI::current_zone["modified"] = true;
+	DnsServer::StoreCurrentZone (DnsServerUI::current_zone);
 	DnsServer::StoreZone ();
 	DnsServer::SetModified ();
     }
 
-    was_editing_zone = true;
+    DnsServerUI::was_editing_zone = true;
     return (symbol)ret;
 }
 
@@ -2148,7 +2151,7 @@ symbol runSlaveZoneTabDialog () {
 	return one_acl != "none";
     });
 
-    string zone_name = current_zone["zone"]:"";
+    string zone_name = DnsServerUI::current_zone["zone"]:"";
     term contents = `VBox (
 	`HBox (
 	    // Label - connected with Textentry which shows current edited zone
@@ -2179,20 +2182,20 @@ symbol runSlaveZoneTabDialog () {
     map event = $[];
     any ret = nil;
     ZoneAclInit ();
-    string zm = current_zone["masters"]:"";
+    string zm = DnsServerUI::current_zone["masters"]:"";
     integer i = findfirstof (zm, "{");
     if (i != nil)
         zm = substring (zm, i + 1);
     i = findfirstof (zm, "}");
     if (i != nil)
         zm = substring (zm, 0, i);
-    current_zone_masters = splitstring (zm, ";");
-    current_zone_masters = maplist (string m, current_zone_masters, ``(
+    DnsServerUI::current_zone_masters = splitstring (zm, ";");
+    DnsServerUI::current_zone_masters = maplist (string m, DnsServerUI::current_zone_masters, ``(
         mergestring (splitstring (m, " "), "")
     ));
-    current_zone_masters = filter (string m, current_zone_masters, ``(
+    DnsServerUI::current_zone_masters = filter (string m, DnsServerUI::current_zone_masters, ``(
         m != ""));
-    UI::ChangeWidget (`id ("master"), `Value, current_zone_masters[0]:"");
+    UI::ChangeWidget (`id ("master"), `Value, DnsServerUI::current_zone_masters[0]:"");
     UI::ChangeWidget (`id ("master"), `ValidChars, "0123456789.");
     while (true)
     {
@@ -2209,7 +2212,7 @@ symbol runSlaveZoneTabDialog () {
 	if (ret == `back)
 	{
 	    // fixing bug #45950, slave zone _MUST_ have master server
-	    if (size(current_zone_masters)==0) {
+	    if (size(DnsServerUI::current_zone_masters)==0) {
 		if (Popup::ContinueCancelHeadline(
 		    // TRANSLATORS: Popup error headline
 		    _("Missing Master Server"),
@@ -2219,8 +2222,8 @@ Configuration of a DNS server without a master server would fail.
 If you continue, the current zone will be removed.")
 		)) {
 		    // removing current zone - zone needs master server
-		    zones = filter (map z, zones, ``(z != current_zone));
-		    DnsServer::StoreZones (zones);
+        DnsServerUI::zones = filter (map z, DnsServerUI::zones, ``(z != DnsServerUI::current_zone));
+		    DnsServer::StoreZones (DnsServerUI::zones);
 		    break;
 		} else {
 		    continue;
@@ -2256,15 +2259,15 @@ If you continue, the current zone will be removed.")
     }
     if (ret == `next)
     {
-	current_zone["masters"] = sformat ("{ %1; }",
+      DnsServerUI::current_zone["masters"] = sformat ("{ %1; }",
 	    (string)UI::QueryWidget (`id ("master"), `Value));
 	ZoneAclStore ();
-	current_zone["modified"] = true;
-	DnsServer::StoreCurrentZone (current_zone);
+  DnsServerUI::current_zone["modified"] = true;
+	DnsServer::StoreCurrentZone (DnsServerUI::current_zone);
 	DnsServer::StoreZone ();
 	DnsServer::SetModified ();
     }
-    was_editing_zone = true;
+    DnsServerUI::was_editing_zone = true;
     return (symbol) ret;
 }
 
@@ -2273,7 +2276,7 @@ If you continue, the current zone will be removed.")
  * @return any dialog result for wizard
  */
 symbol runStubZoneTabDialog () {
-    was_editing_zone = true;
+  DnsServerUI::was_editing_zone = true;
     return runSlaveZoneTabDialog ();
 }
 
@@ -2317,8 +2320,8 @@ void ForwardZone_DeleteZoneForwarder () {
  */
 symbol runForwardZoneTabDialog () {
 
-    string zone_name = current_zone["zone"]:"";
-    current_zone_forwarders = DnsServerAPI::GetZoneForwarders(current_zone["zone"]:"");
+    string zone_name = DnsServerUI::current_zone["zone"]:"";
+    current_zone_forwarders = DnsServerAPI::GetZoneForwarders(DnsServerUI::current_zone["zone"]:"");
 
     term contents =
 	`VBox (
@@ -2398,17 +2401,17 @@ Really deny these queries?"))) {
 	    }
 	
 	    y2milestone("Zone %1 (%2), Forwarders: %3",
-		current_zone["zone"]:"",
-		Punycode::DecodeDomainName(current_zone["zone"]:""),
+		DnsServerUI::current_zone["zone"]:"",
+		Punycode::DecodeDomainName(DnsServerUI::current_zone["zone"]:""),
 		current_zone_forwarders
 	    );
-	    current_zone["modified"] = true;
+      DnsServerUI::current_zone["modified"] = true;
 	    if (size(current_zone_forwarders) > 0) {
-		current_zone["forwarders"] = sformat("{ %1; }", mergestring(current_zone_forwarders, "; "));
+        DnsServerUI::current_zone["forwarders"] = sformat("{ %1; }", mergestring(current_zone_forwarders, "; "));
 	    } else {
-		current_zone["forwarders"] = "{}";
+        DnsServerUI::current_zone["forwarders"] = "{}";
 	    }
-	    DnsServer::StoreCurrentZone (current_zone);
+	    DnsServer::StoreCurrentZone (DnsServerUI::current_zone);
 	    DnsServer::StoreZone ();
 	    DnsServer::SetModified ();
 	    break;
@@ -2419,11 +2422,11 @@ Really deny these queries?"))) {
 
     if (ret == `next)
     {
-	current_zone["modified"] = true;
+      DnsServerUI::current_zone["modified"] = true;
     }
     // empty the list
     current_zone_forwarders = [];
-    was_editing_zone = true;
+    DnsServerUI::was_editing_zone = true;
 
     return (symbol) ret;
 }
diff --git a/src/include/dns-server/dialogs.ycp b/src/include/dns-server/dialogs.ycp
index 3e4ffc2..b046cbb 100644
--- a/src/include/dns-server/dialogs.ycp
+++ b/src/include/dns-server/dialogs.ycp
@@ -12,6 +12,7 @@
     textdomain "dns-server";
 
     import "DnsServer";
+    import "DnsServerUI";
 
     import "Popup";
     import "Label";
@@ -23,6 +24,7 @@
     import "DnsServer";
     import "Confirm";
 
+    include "dns-server/helps.ycp";
     /**
       * Ask user if exit without saving
       * @return boolean true if exit
@@ -82,8 +84,8 @@ Really exit?"));
     }
 
 define symbol runZoneTypeSwitch () ``{
-    string type = current_zone["type"]:"master";
-    string name = current_zone["zone"]:"unknown";
+    string type = DnsServerUI::current_zone["type"]:"master";
+    string name = DnsServerUI::current_zone["zone"]:"unknown";
     y2milestone ("Editing zone %1 (%2), type %3", name, Punycode::DecodeDomainName(name), type);
     if (type == "master")
 	return `master;
diff --git a/src/include/dns-server/helps.ycp b/src/include/dns-server/helps.ycp
index 8886208..1a45831 100644
--- a/src/include/dns-server/helps.ycp
+++ b/src/include/dns-server/helps.ycp
@@ -79,9 +79,9 @@ both DHCP and DNS servers.</p>"),
     // help 3/5, only for alt. 1
     "master_zone" : _("<p><b><big>Editing a DNS Zone</big></b><br>
 To edit the zone settings, choose the appropriate
-entry of the table then click <b>Edit</b>.</p>")
+entry of the table then click <b>Edit</b>.</p>") +
     // help 4/5, only for alt. 1
-    + _("<p>To add a new record to the zone, click <b>Add</b>. To remove
+    _("<p>To add a new record to the zone, click <b>Add</b>. To remove
 a record, select it and click <b>Delete</b>.</p>"),
 
     // help 5/5, only for alt. 1
@@ -127,42 +127,42 @@ via all network interfaces to which it listens, check
     // soa dialog
     // help text 1/9
     "soa" : _("<p><b><big>SOA Record Configuration</big></b><br>
-Set the entries of the SOA record.</p>")
+Set the entries of the SOA record.</p>") +
 
     // help text 2/9 - TTL
-    + _("<p><b>$TTL</b> specifies the time to live for all records in the
-zone that do not have an explicit TTL.</p>")
+    _("<p><b>$TTL</b> specifies the time to live for all records in the
+zone that do not have an explicit TTL.</p>") +
 
     // help text 3/9 - Primary source
-    + _("<p><b>Primary Source</b> must contain the fully qualified domain name
-of the primary name server.</p>")
+    _("<p><b>Primary Source</b> must contain the fully qualified domain name
+of the primary name server.</p>") +
 
     // help text 4/9 - Administrator's mail
-    + _("<p><b>Administrator's Mail</b> must contain the e-mail address of
+    _("<p><b>Administrator's Mail</b> must contain the e-mail address of
 the administrator responsible for the zone.</p>
-")
+") +
 
     // help text 5/9 - Serial
-    + _("<p><b>Serial</b> number is used for determining if the zone has changed on
+    _("<p><b>Serial</b> number is used for determining if the zone has changed on
 the master servers (so that slave servers do not always need to synchronize the
 entire zone).</p>
-")
+") +
 
     // help text 6/9 - Refresh
-    + _("<p><b>Refresh</b> sets how often the zone should be synchronized from
-master name server to slave name servers.</p>")
+    _("<p><b>Refresh</b> sets how often the zone should be synchronized from
+master name server to slave name servers.</p>") +
 
     // help text 7/9 - Retry
-    + _("<p><b>Retry</b> sets how often slave servers try to synchronize
-the zone from the master server if synchronization fails.</p>")
+    _("<p><b>Retry</b> sets how often slave servers try to synchronize
+the zone from the master server if synchronization fails.</p>") +
 
     // help text 8/9 - Expiry
-    + _("<p><b>Expiry</b> means the period after which the zone expires on slave
+    _("<p><b>Expiry</b> means the period after which the zone expires on slave
 servers and slave servers stop answering replies until it is synchronized.
-</p>")
+</p>") +
 
     // help text 9/9 - Minimum
-    + _("<p><b>Minimum</b> sets for how long the slave servers should cache
+    _("<p><b>Minimum</b> sets for how long the slave servers should cache
 negative answers (name resolution failed).</p>"),
 
     // ddns keys dialog
@@ -372,34 +372,34 @@ To remove one of the listed mail servers, select it and click
 
     /* Zone Editor - Help for tab - Zone (SOA) 1/7 */
 "zone_editor_soa" : _("<p><b><big>SOA Record Configuration</big></b><br>
-Set the entries of the SOA record.</p>")
+Set the entries of the SOA record.</p>") +
 
     /* Zone Editor - Help for tab - Zone (SOA) 2/7 */
-+ _("<p><b>Serial</b> is the number used for determining if the zone has 
+_("<p><b>Serial</b> is the number used for determining if the zone has 
 changed on
 the master servers (then slave servers do not always need to synchronize the
 entire zone).</p>
-")
+") +
 
     /* Zone Editor - Help for tab - Zone (SOA) 3/7 */
-+ _("<p><b>TTL</b> specifies the time to live for all records in the
-zone that do not have an explicit TTL.</p>")
+_("<p><b>TTL</b> specifies the time to live for all records in the
+zone that do not have an explicit TTL.</p>") +
 
     /* Zone Editor - Help for tab - Zone (SOA) 4/7 */
-+ _("<p><b>Refresh</b> sets how often the zone should be synchronized from
-master name server to slave name servers.</p>")
+_("<p><b>Refresh</b> sets how often the zone should be synchronized from
+master name server to slave name servers.</p>") +
 
     /* Zone Editor - Help for tab - Zone (SOA) 5/7 */
-+ _("<p><b>Retry</b> sets how often slave servers try to synchronize
-the zone from the master server if synchronization fails.</p>")
+_("<p><b>Retry</b> sets how often slave servers try to synchronize
+the zone from the master server if synchronization fails.</p>") +
 
     /* Zone Editor - Help for tab - Zone (SOA) 6/7 */
-+ _("<p><b>Expiration</b> means the period after which the zone expires on slave
+_("<p><b>Expiration</b> means the period after which the zone expires on slave
 servers and slave servers stop answering replies until it is synchronized.
-</p>")
+</p>") +
 
     /* Zone Editor - Help for tab - Zone (SOA) 7/7 */
-+ _("<p><b>Minimum</b> sets for how long the slave servers should cache
+_("<p><b>Minimum</b> sets for how long the slave servers should cache
 negative answers (name resolution failed).</p>"),
 
     /* Zone Editor - Help for tab - Records 1/7  or 1/5 */
diff --git a/src/include/dns-server/options.ycp b/src/include/dns-server/options.ycp
index 4d7d727..4b21795 100644
--- a/src/include/dns-server/options.ycp
+++ b/src/include/dns-server/options.ycp
@@ -14,6 +14,7 @@ textdomain "dns-server";
 import "Label";
 import "CWM";
 import "DnsServer";
+import "DnsServerUI";
 
 // global table fallback handlers
 
@@ -27,7 +28,7 @@ global define void globalPopupInit (any opt_id, string opt_key) ``{
     {
 	integer oid = (integer)opt_id;
 	UI::ChangeWidget (`id (opt_key), `Value,
-	    current_section[oid, "value"]:"");
+	    DnsServerUI::current_section[oid, "value"]:"");
     }
     UI::SetFocus (`id (opt_key));
 }
@@ -44,12 +45,12 @@ global define void globalPopupStore (any opt_id, string opt_key) ``{
 	    "key" : opt_key,
 	    "value" : UI::QueryWidget (`id (opt_key), `Value),
 	];
-	current_section = add (current_section, new_opt);
+  DnsServerUI::current_section = add (DnsServerUI::current_section, new_opt);
     }
     else
     {
 	integer oid = (integer)opt_id;
-	current_section[oid, "value"] = UI::QueryWidget (`id (opt_key), `Value);
+  DnsServerUI::current_section[oid, "value"] = UI::QueryWidget (`id (opt_key), `Value);
     }
     DnsServer::SetModified ();
 }
@@ -62,7 +63,7 @@ global define void globalPopupStore (any opt_id, string opt_key) ``{
  */
 global define string globalTableEntrySummary (any opt_id, string opt_key)``{
     integer oid = (integer)opt_id;
-    return sformat ("%1", current_section[oid, "value"]:"");
+    return sformat ("%1", DnsServerUI::current_section[oid, "value"]:"");
 }
 
 
@@ -79,8 +80,8 @@ global define void masterPopupInit (any opt_id, string opt_key) ``{
     string value = "";
     if (index != nil)
     {
-	key = current_zone["records", index, "key"]:"";
-	value = current_zone["records", index, "value"]:"";
+	key = DnsServerUI::current_zone["records", index, "key"]:"";
+	value = DnsServerUI::current_zone["records", index, "value"]:"";
     }
     UI::ChangeWidget (`key, `Value, key);
     UI::ChangeWidget (`value, `Value, value);
@@ -98,14 +99,14 @@ global define void masterPopupStore (any opt_id, string opt_key) ``{
     string value = (string)UI::QueryWidget (`value, `Value);
     if (index != nil)
     {
-	current_zone_upd_ops = add (current_zone_upd_ops, $[
+      DnsServerUI::current_zone_upd_ops = add (DnsServerUI::current_zone_upd_ops, $[
 	    "operation" : "delete",
 	    "type" : opt_key,
-	    "key" : current_zone["records", index, "key"]:"",
-	    "value" : current_zone["records", index, "value"]:"",
+	    "key" : DnsServerUI::current_zone["records", index, "key"]:"",
+	    "value" : DnsServerUI::current_zone["records", index, "value"]:"",
 	]);
-	current_zone["records", index, "value"] = value;
-	current_zone["records", index, "key"] = key;
+      DnsServerUI::current_zone["records", index, "value"] = value;
+      DnsServerUI::current_zone["records", index, "key"] = key;
     }
     else
     {
@@ -114,9 +115,9 @@ global define void masterPopupStore (any opt_id, string opt_key) ``{
 	    "value" : value,
 	    "type" : opt_key,
 	];
-	current_zone["records"] = add (current_zone["records"]:[], new_rec);
+  DnsServerUI::current_zone["records"] = add (DnsServerUI::current_zone["records"]:[], new_rec);
     }
-    current_zone_upd_ops = add (current_zone_upd_ops, $[
+    DnsServerUI::current_zone_upd_ops = add (DnsServerUI::current_zone_upd_ops, $[
 	"operation" : "add",
 	"type" : opt_key,
 	"key" : key,
@@ -132,7 +133,7 @@ global define void masterPopupStore (any opt_id, string opt_key) ``{
  */
 global define string masterTableEntrySummary (any opt_id, string opt_key)``{
     integer index = (integer)opt_id;
-    string addr = current_zone["records", index, "value"]:"A";
+    string addr = DnsServerUI::current_zone["records", index, "value"]:"A";
     // %1 is usually an IP address
     return sformat (_("Unknown Record Type: %1"), addr);
 }
@@ -146,14 +147,14 @@ global define string masterTableEntrySummary (any opt_id, string opt_key)``{
  */
 global define string masterTableLabelFunc (any opt_id, string opt_key) ``{
     integer index = (integer)opt_id;
-    return current_zone["records", index, "key"]:"";
+    return DnsServerUI::current_zone["records", index, "key"]:"";
 }
 
 // A popup
 
 global define string ASummary (any opt_id, string key) ``{
     integer index = (integer)opt_id;
-    string addr = current_zone["records", index, "value"]:"A";
+    string addr = DnsServerUI::current_zone["records", index, "value"]:"A";
     // table entry, %1 is IP address
     return sformat (_("Host %1"), addr);
 }
@@ -184,7 +185,7 @@ define map getAPopup () ``{
 
 global define string CNAMESummary (any opt_id, string key) ``{
     integer index = (integer)opt_id;
-    string addr = current_zone["records", index, "value"]:"A";
+    string addr = DnsServerUI::current_zone["records", index, "value"]:"A";
     // table entry, %1 is host name
     return sformat (_("Alias for %1"), addr);
 }
@@ -216,7 +217,7 @@ define map getCNAMEPopup () {
 
 global define string PTRSummary (any opt_id, string key) ``{
     integer index = (integer)opt_id;
-    string addr = current_zone["records", index, "value"]:"A";
+    string addr = DnsServerUI::current_zone["records", index, "value"]:"A";
     // table entry, %1 is host name
     return sformat (_("Pointer to %1"), addr);
 }
@@ -247,7 +248,7 @@ define map getPTRPopup () ``{
 
 global define string NSSummary (any opt_id, string key) ``{
     integer index = (integer)opt_id;
-    string addr = current_zone["records", index, "value"]:"A";
+    string addr = DnsServerUI::current_zone["records", index, "value"]:"A";
     // table entry, %1 is host name
     return sformat (_("Name Server %1"), addr);
 }
@@ -276,7 +277,7 @@ define map getNSPopup () ``{
 
 global define string MXSummary (any opt_id, string key) ``{
     integer index = (integer)opt_id;
-    string addr = current_zone["records", index, "value"]:"A";
+    string addr = DnsServerUI::current_zone["records", index, "value"]:"A";
     list<string> l = splitstring (addr, " ");
     l = filter (string s, l, ``(s != ""));
     string prio = l[0]:"";
@@ -293,8 +294,8 @@ global define void MXInit (any opt_id, string key) ``{
     string value = "";
     if (index != nil)
     {
-	key = current_zone["records", index, "key"]:"";
-	value = current_zone["records", index, "value"]:"";
+	key = DnsServerUI::current_zone["records", index, "key"]:"";
+	value = DnsServerUI::current_zone["records", index, "value"]:"";
     }
     list<string> l = splitstring (value, " ");
     l = filter (string s, l, ``(s != ""));
@@ -316,14 +317,14 @@ global define void MXStore (any opt_id, string opt_key) ``{
     value = sformat ("%1 %2", prio, value);
     if (index != nil)
     {
-	current_zone_upd_ops = add (current_zone_upd_ops, $[
+      DnsServerUI::current_zone_upd_ops = add (DnsServerUI::current_zone_upd_ops, $[
 	    "operation" : "delete",
 	    "type" : opt_key,
-	    "key" : current_zone["records", index, "key"]:"",
-	    "value" : current_zone["records", index, "value"]:"",
+	    "key" : DnsServerUI::current_zone["records", index, "key"]:"",
+	    "value" : DnsServerUI::current_zone["records", index, "value"]:"",
 	]);
-	current_zone["records", index, "value"] = value;
-	current_zone["records", index, "key"] = key;
+      DnsServerUI::current_zone["records", index, "value"] = value;
+      DnsServerUI::current_zone["records", index, "key"] = key;
     }
     else
     {
@@ -332,9 +333,9 @@ global define void MXStore (any opt_id, string opt_key) ``{
 	    "value" : value,
 	    "type" : opt_key,
 	];
-	current_zone["records"] = add (current_zone["records"]:[], new_rec);
+  DnsServerUI::current_zone["records"] = add (DnsServerUI::current_zone["records"]:[], new_rec);
     }
-    current_zone_upd_ops = add (current_zone_upd_ops, $[
+    DnsServerUI::current_zone_upd_ops = add (DnsServerUI::current_zone_upd_ops, $[
 	"operation" : "add",
 	"type" : opt_key,
 	"key" : key,
diff --git a/src/include/dns-server/wizards.ycp b/src/include/dns-server/wizards.ycp
index 7f9a19f..5fbbbee 100644
--- a/src/include/dns-server/wizards.ycp
+++ b/src/include/dns-server/wizards.ycp
@@ -17,6 +17,10 @@
     import "Popup";
     import "Sequencer";
     import "Wizard";
+    import "DnsServerUI";
+
+    include "dns-server/dialog-main.ycp";
+    include "dns-server/dialog-installwizard.ycp";
 
     global define symbol TabSequence () {
 	map aliases = $[
diff --git a/src/modules/DnsServerUI.ycp b/src/modules/DnsServerUI.ycp
index c64ee6e..8d75aa7 100644
--- a/src/modules/DnsServerUI.ycp
+++ b/src/modules/DnsServerUI.ycp
@@ -15,6 +15,7 @@
     module "DnsServerUI";
     textdomain "dns-server";
 
+    import "DnsServerHelperFunctions";
     import "DnsServer";
     import "DnsTsigKeys";
     import "DnsZones";
@@ -61,8 +62,6 @@
       */
     global map popups = InitPopups ();
 
-//    include "dns-server/widgets.ycp";
-
     /**
       * Map of widgets for CWM
       */
diff --git a/src/widgets.ycp b/src/widgets.ycp
deleted file mode 100644
index 5698a69..0000000
--- a/src/widgets.ycp
+++ /dev/null
@@ -1,1397 +0,0 @@
-/**
- * File:	include/dns-server/widgets.ycp
- * Package:	Configuration of dns-server
- * Summary:	Widgets used by DNS server configuration
- * Authors:	Jiri Srain <jsrain@suse.cz>
- *		Lukas Ocilka <locilka@suse.cz>
- *
- * $Id$
- */
-
-{
-
-    // dead source code
-    // not in use anymore
-
-    textdomain "dns-server";
-
-    import "Label";
-    import "Popup";
-    import "LogView";
-    import "CWM";
-    import "DnsServer";
-    import "TablePopup";
-    import "Confirm";
-
-global define symbol chrootHandle (string id, map event);
-global define symbol zonesHandle (string key, map event);
-define symbol advMenubuttonHandle (string id, map event);
-
-// start service widget
-
-/**
- * Initialize the widget
- * @param id any widget id
- */
-global define void startInit (string id) ``{
-    boolean ss = DnsServer::GetStartService();
-    UI::ChangeWidget (`id ("start"), `Value, ss);
-}
-
-/**
- * Store settings of the widget
- * @param id string widget id
- * @param event map event that caused storing process
- */
-global define void startStore (string id, map event) ``{
-    boolean ss = (boolean)UI::QueryWidget (`id ("start"), `Value);
-    DnsServer::SetStartService (ss);
-}
-
-/**
- * Handle function of the widget
- * @param id string widget id
- * @param event map event that caused storing process
- * @return symbol always nil
- */
-global define symbol startHandle (string id, map event) ``{
-    boolean start = (boolean)UI::QueryWidget (`id ("start"), `Value);
-    if (start != DnsServer::GetStartService ())
-	DnsServer::SetModified ();
-    return nil;
-}
-
-/**
- * Get the widget description map
- * @return list of items for the table
- */
-global define map getStartWidget () ``{
-    return $[
-	"widget" : `checkbox,
-	// check box
-	"label" : _("&Start DNS Server"),
-	"help" : HELPS["start"]:"",
-	"init" : startInit,
-	"handle" : startHandle,
-	"store" : startStore,
-	"opt" : [`notify],
-    ];
-}
-
-// chroot widget
-
-/**
- * Initialize the widget
- * @param id any widget id
- */
-global define void chrootInit (string id) ``{
-    boolean ss = DnsServer::GetChrootJail();
-    chrootHandle (id, $[ "ID" : "start" ]);
-    UI::ChangeWidget (`id (id), `Value, ss);
-}
-
-/**
- * Store settings of the widget
- * @param id string widget id
- * @param event map event that caused storing process
- */
-global define void chrootStore (string id, map event) ``{
-    boolean ss = (boolean)UI::QueryWidget (`id (id), `Value);
-    DnsServer::SetChrootJail (ss);
-}
-
-/**
- * Handle function of the widget
- * @param id string widget id
- * @param event map event that caused storing process
- * @return symbol always nil
- */
-global define symbol chrootHandle (string id, map event) ``{
-    if (event["ID"]:nil == "start")
-    {
-	boolean en = (boolean)UI::QueryWidget (`id ("start"), `Value);
-	UI::ChangeWidget (`id (id), `Enabled, en);
-	return nil;
-    }
-    boolean start = (boolean)UI::QueryWidget (`id (id), `Value);
-    if (start != DnsServer::GetChrootJail ())
-	DnsServer::SetModified ();
-    return nil;
-}
-
-/**
- * Get the widget description map
- * @return list of items for the table
- */
-global define map getChrootWidget () ``{
-    return $[
-	"widget" : `checkbox,
-	// check box
-	"label" : _("&Run DNS Server in Chroot Jail"),
-	"help" : HELPS["chroot"]:"",
-	"init" : chrootInit,
-	"handle" : chrootHandle,
-	"handle_events" : [ "start", "chroot" ],
-	"store" : chrootStore,
-    ];
-}
-
-// zone direction widget (forward/reverse)
-
-/**
- * Initialize the widget
- * @param id any widget id
- */
-global define void zoneDirectionInit (string id) ``{
-    string zone = current_zone["zone"]:"";
-    UI::ChangeWidget (`id (id), `CurrentButton,
-	issubstring (zone, "in-addr.arpa") ? "reverse" : "forward");
-}
-
-/**
- * Store settings of the widget
- * @param id string widget id
- * @param event map event that caused storing process
- */
-global define void zoneDirectionStore (string id, map event) ``{
-    string zone = current_zone["zone"]:"";
-    string current = (string)UI::QueryWidget (`id (id), `CurrentButton);
-    if (current == "forward" && issubstring (zone, "in-addr.arpa"))
-	zone = "";
-    else if (current == "reverse" && ! issubstring (zone, "in-addr.arpa"))
-	zone = "in-addr.arpa";
-    current_zone["zone"] = zone;
-}
-
-/**
- * Get the widget description map
- * @return list of items for the table
- */
-define map getZoneDirectionWidget () ``{
-    return $[
-	"widget" : `radio_buttons,
-	"items" : [
-            // radio button, type of zone
-	    ["forward", _("For&ward")],
-            // radio button, type of zone
-	    ["reverse", _("Re&verse")],
-	],
-	"vspacing" : 1,
-	// frame containing radio buttons group
-	"label" : _("Zone Direction"),
-	"help" : HELPS["zone_direction"]:"",
-	"init" : zoneDirectionInit,
-	"store" : zoneDirectionStore,
-    ];
-}
-
-// zone type widget (master/slave/...)
-
-/**
- * Initialize the widget
- * @param id any widget id
- */
-global define void zoneTypeInit (string id) ``{
-    string type = current_zone["type"]:"master";
-    UI::ChangeWidget (`id (id), `CurrentButton, type);
-}
-
-/**
- * Store settings of the widget
- * @param id string widget id
- * @param event map event that caused storing process
- */
-global define void zoneTypeStore (string id, map event) ``{
-    string type = (string)UI::QueryWidget (`id (id), `CurrentButton);
-    current_zone["type"] = type;
-}
-
-/**
- * Get the widget description map
- * @return list of items for the table
- */
-define map getZoneTypeWidget () ``{
-    return $[
-	"widget" : `radio_buttons,
-	"items" : [
-            // radio button, type of zone
-	    ["master", _("&Master")],
-            // radio button, type of zone
-	    ["slave", _("&Slave")],
-            // radio button, type of zone
-	    ["stub", _("S&tub")],
-	],
-	"vspacing" : 1,
-	// frame containing radio buttons group
-	"label" : _("Type"),
-	"help" : HELPS["zone_type"]:"",
-	"init" : zoneTypeInit,
-	"store" : zoneTypeStore,
-    ];
-}
-
-// zone name widget
-
-/**
- * Initialize the widget
- * @param id any widget id
- */
-global define void zoneNameInit (string id) ``{
-    string name = current_zone["zone"]:"";
-    UI::ChangeWidget (`id (id), `Value, name);
-}
-
-/**
- * Store settings of the widget
- * @param id string widget id
- * @param event map event that caused storing process
- */
-global define void zoneNameStore (string id, map event) ``{
-    string name = (string)UI::QueryWidget (`id (id), `Value);
-    current_zone["zone"] = name;
-}
-
-/**
- * Get the widget description map
- * @return list of items for the table
- */
-global define map getZoneNameWidget () ``{
-    return $[
-	"widget" : `inputfield,
-	// text entry
-	"label" : _("Zone"),
-	"init" : zoneNameInit,
-	"store" : zoneNameStore,
-	"help" : HELPS["zone_name"]:"",
-    ];
-}
-
-// soa widget
-
-/**
- * Initialize the widget
- * @param id any widget id
- */
-global define void soaInit (string id) ``{
-    foreach (string r,
-	["serial", "refresh", "retry", "expiry", "minimum", "server"],
-    ``{
-	    UI::ChangeWidget (`id (r), `Value, current_zone["soa", r]:"");
-    });
-    string mail = current_zone["soa", "mail"]:"";
-    if (regexpmatch (mail, "^[^@\.]+\..*$"))
-	mail = regexpsub (mail, "^([^@\.]+)\.(.*)$", "\\1@\\2");
-    UI::ChangeWidget (`id ("mail"), `Value, mail);
-    UI::ChangeWidget (`id ("ttl"), `Value, current_zone["ttl"]:"");
-    UI::SetFocus (`id ("ttl"));
-}
-
-/**
- * Store settings of the widget
- * @param id string widget id
- * @param event map event that caused storing process
- */
-global define void soaStore (string id, map event) ``{
-    current_zone["soa"] = current_zone["soa"]:$[];
-    foreach (string r,
-	["serial", "refresh", "retry", "expiry", "minimum", "server"],
-    ``{
-	current_zone["soa", r] = UI::QueryWidget (`id (r), `Value);
-    });
-    string mail = (string)UI::QueryWidget (`id ("mail"), `Value);
-    if (regexpmatch (mail, "^[^@]+@.*$"))
-    {
-	mail = regexpsub (mail, "^([^@]+)@(.*)$", "\\1.\\2");
-    }
-    if (regexpmatch (mail, "^.*[^\.]$"))
-    {
-	mail = sformat ("%1.", mail);
-    }
-    current_zone["soa", "mail"] = mail;
-    string server = (string)UI::QueryWidget (`id ("server"), `Value);
-    if (regexpmatch (mail, "^.*[^\.]$"))
-    {
-	mail = sformat ("%1.", mail);
-    }
-    current_zone["soa", "server"] = server;
-    current_zone["ttl"] = UI::QueryWidget (`id ("ttl"), `Value);
-    current_zone["soa_modified"] = 1;
-}
-
-/**
- * Get the widget description map
- * @return map widget description map
- */
-define map getSoaWidget () ``{
-    return $[
-	"widget" : `custom,
-	"init" : soaInit,
-	"store" : soaStore,
-	"custom_widget" : `VBox (
-	    `HBox (
-		`VBox (
-		    `VWeight (1,
-			// text entry
-			`InputField (`id ("ttl"), `opt (`hstretch), _("$TT&L"))),
-		    `VWeight (2, `VStretch ()),
-		    `VWeight (1,
-			// text entry
-			`InputField (`id ("server"), `opt (`hstretch), _("Primary &Source"))),
-		    `VWeight (1,
-			// text entry
-			`InputField (`id ("mail"), `opt (`hstretch), _("&Administrator's Mail")))
-		),
-		`HSpacing (1),
-		`VBox (
-		    `VWeight (1,
-			// text entry
-			`InputField (`id ("serial"), `opt (`hstretch), _("Serial"))),
-		    `VWeight (1,
-			// text entry
-			`InputField (`id ("refresh"), `opt (`hstretch), _("Re&fresh"))),
-		    `VWeight (1,
-			// text entry
-			`InputField (`id ("retry"), `opt (`hstretch), _("Re&try"))),
-		    `VWeight (1,
-			// text entry
-			`InputField (`id ("expiry"), `opt (`hstretch), _("E&xpiration"))),
-		    `VWeight (1,
-			// text entry
-			`InputField (`id ("minimum"), `opt (`hstretch), _("Mi&nimum")))
-		)
-	    )
-	),
-	"help" : HELPS["soa"]:"",
-    ];
-}
-
-
-// soa button
-
-/**
- * Initialize the widget
- * @param key any widget id
- */
-define void soaButtonInit (string key) ``{
-    // push button
-    UI::ReplaceWidget (`_tp_table_repl, `PushButton (`id(key), _("Edit &SOA")));
-}
-
-/**
- * Handle function of a widget
- * @param key any widget key of widget that is processed
- * @param event map event that occured
- * @return symbol symbol for ws or nil
- */
-define symbol soaButtonHandle (string key, map event) ``{
-/*    if (0 == current_zone["soa_modified"]:0)
-    {
-	if (! Popup::YesNo (_("If you edit SOA record of the zone and
-it will be modified from outside, YaST will
-rewrite the chanegs. Continue?")))
-	{
-	    return nil;
-	}
-    }*/
-    return `soa;
-}
-
-/**
- * Get the widget description map
- * @return map widget description map
- */
-define map getSoaButton () ``{
-    return $[
-	"widget" : `custom,
-	"custom_widget" : `VBox (),
-	// push button
-	"label" : _("Edit &SOA"),
-	"init" : soaButtonInit,
-	"handle" : soaButtonHandle,
-	"handle_events" : [ "soa_button" ],
-	"help" : HELPS["soa_button"]:"",
-    ];
-}
-
-/**
- * Handle function of a widget
- * @param key any widget key of widget that is processed
- * @param event map event that occured
- * @return symbol symbol for ws or nil
- */
-define symbol NsMxButtonHandle (string key, map event) ``{
-    return `ns_mx;
-}
-
-/**
- * Get the widget description map
- * @return map widget description map
- */
-define map  getNsMxButton () ``{
-    return $[
-	"widget" : `push_button,
-	// push button
-	"label" : _("Edit &NS and MX Records"),
-	"handle" : NsMxButtonHandle,
-	"handle_events" : [ "ns_mx_button" ],
-    ];
-}
-// global table widget
-
-/**
- * Function for getting contents of the global table
- * @param descr map description map of the table
- * @return list of items for the table
- */
-global define list getGlobalTableContents (map descr) ``{
-    list options = DnsServer::GetGlobalOptions ();
-    integer index = -1;
-    return maplist (any o, current_section, ``{
-	index = index + 1;
-	return index;
-    });
-}
-
-/**
- * Translate option id to option key
- * @param descr map table description map
- * @param id any option id
- * @return string option key
- */
-define string globalTableId2Key (map descr, any id) ``{
-    integer iid = (integer)id;
-    return current_section[iid, "key"]:"";
-}
-
-/**
- * Initialize function of a widget
- * @param id any widget key of widget that is processed
- */
-global define void globalTableInit (string id) ``{
-    current_section = DnsServer::GetGlobalOptions ();
-    TablePopup::TableInitWrapper (id);
-}
-
-/**
- * Store function of a widget
- * @param widget any widget key of widget that is processed
- * @param event map event that occured
- */
-global define void globalTableStore (string widget, map event) ``{
-    DnsServer::SetGlobalOptions (current_section);
-}
-
-/**
- * Delete function of the global table
- * @param opt_id any option id of selected option
- * @param opt_key any option key of selected option
- * @return boolean true if was really deleted
- */
-global define boolean globalTableEntryDelete (any opt_id, any opt_key) ``{
-    integer oid = (integer)opt_id;
-    if (! Confirm::DeleteSelected()) {
-	return false;
-    }
-    current_section[oid] = $[];
-    current_section = filter (map<string,any> o, current_section, ``(o != $[]));
-    return true;
-}
-
-/**
- * Get map of widget
- * @return map of widget
- */
-global define map getGlobalTableWidget () ``{
-    map ret = TablePopup::CreateTableDescr ($[
-	"add_delete_buttons" : true,
-	"up_down_buttons" : false,
-	"unique_keys" : true,
-    ], $[
-	"init" : globalTableInit,
-	"store" : globalTableStore,
-	"options" : DnsServerUI::popups,
-	"ids" : getGlobalTableContents,
-	"id2key" : globalTableId2Key,
-	"fallback" : $[
-	    "init" : globalPopupInit,
-	    "store" : globalPopupStore,
-	    "summary" : globalTableEntrySummary,
-	],
-	"option_delete" : globalTableEntryDelete,
-	"add_items" : [ "hostname", "version", "directory", "named-xfer",
-	    "dump-file", "memstatistics-file", "pid-file",
-	    "statistics-file", "auth-nxdomain", "deallocate-on-exit",
-	    "dialup", "fake-iquery", "fetch-glue", "has-old-clients",
-	    "host-statistics", "host-statistics-max", "multiple-cnames",
-	    "notify", "suppress-initial-notify", "recursion",
-	    "rfc2308-type1", "use-id-pool", "treat-cr-as-space",
-	    "also-notify", "forward", "forwarders", "check-names",
-	    "allow-query", "allow-recursion", "allow-transfer",
-	    "blackhole", "listen-on", "query-source", "lame-ttl",
-	    "max-transfer-time-in", "max-ncache-ttl", "min-roots",
-	    "serial-queries", "transfer-format", "transfers-in",
-	    "transfers-out", "transfers-per-ns", "transfer-source",
-	    "maintain-ixfr-base", "max-ixfr-log-size", "coresize",
-	    "datasize", "files", "stacksize", "cleaning-interval",
-	    "heartbeat-interval", "interface-interval",
-	    "statistics-interval", "topology", "sortlist", "rrset-order",
-	    "preferred-glue", "listen-on-v6",
-	],
-    ]);
-    return ret;
-}
-
-// list of zones widget
-
-/**
- * Initialize function of a widget
- * @param key any widget key of widget that is processed
- */
-global define void zonesInit (string key) ``{
-    integer index = -1;
-    list items = maplist (map z, DnsServer::FetchZones(), ``{
-	index = index + 1;
-	string zone_name = z["zone"]:"";
-	if (zone_name == "." || zone_name == "0.0.127.in-addr.arpa"
-	    || zone_name == "localhost")
-	{
-	    return `item ();
-	}
-	return `item (`id (index), zone_name, z["type"]:"master");
-    });
-    items = filter (any i, items, ``(i != `item ()));
-    UI::ChangeWidget (`id (`zones), `Items, items);
-    UI::SetFocus (`id (`zones));
-    zonesHandle (key, $[ "ID" : "start" ]);
-}
-
-/**
- * handle function of a widget
- * @param key any widget key of widget that is processed
- * @param event map event that occured
- * @return symbol symbol for ws or nil
- */
-global define symbol zonesHandle (string key, map event) ``{
-    if (event["ID"]:nil == "start")
-    {
-	boolean en = (boolean)UI::QueryWidget (`id ("start"), `Value);
-	UI::ChangeWidget (`id (`zones), `Enabled, en);
-	UI::ChangeWidget (`id (`add), `Enabled, en);
-	UI::ChangeWidget (`id (`edit), `Enabled, en);
-	UI::ChangeWidget (`id (`delete), `Enabled, en);
-	return nil;
-    }
-    UI::SetFocus (`id (`zones));
-    integer current = (integer)UI::QueryWidget (`id (`zones), `CurrentItem);
-    if (event["ID"]:nil == `add || event["ID"]:nil == `edit
-	|| event["ID"]:nil == `zones)
-    {
-	if (event["ID"]:nil == `add)
-	{
-	    DnsServer::SelectZone(-1);
-	    current_zone = DnsServer::FetchCurrentZone();
-	    y2milestone ("New zone: %1", current_zone);
-	    return `add;
-	}
-	else
-        {
-	    if (current == nil)
-	    {
-		// popup error message
-		Popup::Message (_("No zone is selected."));
-		return nil;
-	    }
-	    DnsServer::SelectZone(current);
-	    current_zone = DnsServer::FetchCurrentZone();
-	    y2milestone ("Fetched zone: %1", current_zone);
-	    return `edit;
-	}
-    }
-    else if (event["ID"]:nil == `delete)
-    {
-	if (current == nil)
-	{
-	    // popup error message
-	    Popup::Message (_("No zone is selected."));
-	    return nil;
-	}
-	// yes-no popup
-	if (Popup::YesNo (_("Delete selected zone?")))
-	{
-	    DnsServer::RemoveZone (current, false);
-	    zonesInit (key);
-	}
-    }
-    return nil;
-}
-
-/**
- * Get map of widget
- * @return map of widget
- */
-global define map getZoneListWidget () ``{
-    return $[
-	"widget" : `custom,
-	"custom_widget" : `VBox (
-		`Table (`id (`zones), `opt (`notify), `header (
-		    // table header
-		    _("Zone"),
-		    // table header
-		    _("Type")
-		), []),
-		`HBox (
-		    `PushButton (`id (`add), `opt (`key_F3),
-			Label::AddButton ()),
-		    `PushButton (`id (`edit), `opt (`key_F4),
-			Label::EditButton ()),
-		    `PushButton (`id (`delete), `opt (`key_F5),
-			Label::DeleteButton ()),
-		    `HStretch (),
-		    `ReplacePoint (`id (`zones_rp), `VBox ())
-		)
-	),
-	"init" : zonesInit,
-	"handle" : zonesHandle,
-	"help" : HELPS["zones"]:"",
-    ];
-}
-
-// global menu button
-
-/**
- * Initialize function of a widget
- * @param id string widget key of widget that is processed
- */
-define void advMenubuttonInit (string id) ``{
-    UI::ReplaceWidget (`zones_rp, `MenuButton (`id (`adv_menubutton),
-	// menu button
-	_("Ad&vanced"), [
-	    // menubutton item
-	    `item (`id (`global_options), _("&Edit Global Options")),
-	    // menubutton item
-	    `item (`id (`firewall), _("&Firewall Configuration")),
-	    // menubutton item
-	    `item (`id (`ddns), _("Manage &TSIG Keys")),
-	    // menubutton item
-	    `item (`id (`show_log), _("&Display Log")),
-	]));
-    advMenubuttonHandle (id, $["ID" : "start"]);
-}
-
-/**
- * handle function of a widget
- * @param id string widget key of widget that is processed
- * @param event map event that occured
- * @return symbol symbol for ws or nil
- */
-define symbol advMenubuttonHandle (string id, map event) ``{
-    if (event["ID"]:nil == "start")
-    {
-	boolean en = (boolean)UI::QueryWidget (`id ("start"), `Value);
-	UI::ChangeWidget (`id (`adv_menubutton), `Enabled, en);
-	return nil;
-    }
-    symbol e = (symbol)(event["ID"]:nil);
-    if (e == `show_log)
-    {
-	LogView::Display ($[
-	    "file" : "/var/log/messages",
-	    "grep" : "named",
-	    "save" : true,
-	    "actions" : [
-		// menubutton entry, try to keep short
-		[ _("Reload DNS Server"),
-		    RestartDnsDaemon ],
-		// menubutton entry, try to keep short
-		[ _("Save Settings and Reload DNS Server"),
-		    DnsServer::Write ],
-	    ],
-	]);
-	return nil;
-    }
-    return e;
-}
-
-/**
- * Get map of widget
- * @return map of widget
- */
-define map getAdvancedMenubutton () ``{
-    return $[
-	"init" : advMenubuttonInit,
-	"help" : HELPS["adv_mbutton"]:"",
-	"handle" : advMenubuttonHandle,
-	"handle_events" : [ `global_options, `show_log, `firewall, `ddns,
-	    "start" ],
-	"widget" : `custom, // support for non-displayed widgets would be better
-	"custom_widget" : `VBox (),
-    ];
-}
-
-// name servers widget
-
-/**
- * handle function of a widget
- * @param id string widget key of widget that is processed
- * @param event map event that occured
- * @return symbol symbol for ws or nil
- */
-global define symbol nsHandle (string id, map event) ``{
-    if (event["ID"]:nil == `ns_add)
-    {
-	string new = nil;
-	UI::OpenDialog (`VBox (
-	    `InputField (`id (`address), `opt (`hstretch), _("&Name Server")),
-	    `ButtonBox (
-		`PushButton (`id (`ok), `opt (`okButton, `default, `key_F10), Label::OKButton ()),
-		`PushButton (`id (`cancel), `opt (`cancelButton, `key_F9), Label::CancelButton ())
-	    )
-	));
-	any ret = nil;
-	while (ret == nil)
-	{
-	    ret = UI::UserInput ();
-	    if (ret == `ok)
-		new = (string)UI::QueryWidget (`id (`address), `Value);
-	}
-	UI::CloseDialog ();
-	if (new == nil)
-	    return nil;
-	current_zone_ns = add (current_zone_ns, new);
-    }
-    else if (event["ID"]:nil == `ns_delete)
-    {
-	string selected = (string)
-	    UI::QueryWidget (`id (`ns_addresses), `CurrentItem);
-	if (selected == nil)
-	{
-	    // popup message
-	    Popup::Message (_("No name server selected."));
-	    return nil;
-	}
-	current_zone_ns = filter (string s, current_zone_ns, ``(
-	    s != selected));
-    }
-    UI::ReplaceWidget (`ns_addresses_rp, `SelectionBox (`id (`ns_addresses),
-	// selection box label
-	_("&Name Servers"),
-	current_zone_ns));
-    return nil;
-}
-
-/**
- * Initialize function of a widget
- * @param id string widget key of widget that is processed
- */
-global define void nsInit (string id) ``{
-    string zone_name = current_zone["zone"]:"";
-    list<map> records = filter (map r, (list<map>)(current_zone["records"]:[]), ``(
-	r["type"]:"" == "NS"
-	&& (r["key"]:"" == sformat ("%1.", zone_name)
-	    || r["key"]:"" == zone_name)
-    ));
-    current_zone_ns = maplist (map r, records, ``(r["value"]:""));
-    current_zone_ns = filter (string z, current_zone_ns, ``(z != ""));
-    nsHandle (id, $[]);
-}
-
-/**
- * Store settings of the widget
- * @param id string widget id
- * @param event map event that caused storing process
- */
-global define void nsStore (string id, map event) ``{
-    string zone_name = current_zone["zone"]:"";
-    list records = filter (map r, current_zone["records"]:[], ``(
-	! (r["type"]:"" == "NS"
-	&& (r["key"]:"" == sformat ("%1.", zone_name)
-	    || r["key"]:"" == zone_name))
-    ));
-    list new_rec = maplist (string a, current_zone_ns, ``(
-	$[
-	    "key" : sformat ("%1.", zone_name),
-	    "type" : "NS",
-	    "value" : a,
-	]
-    ));
-    current_zone["records"] = merge (new_rec, records);
-}
-
-/**
- * Get map of widget
- * @return map of widget
- */
-define map getNameServersWidget () ``{
-    return $[
-	"widget" : `custom,
-	"custom_widget" : `VBox (
-	    `ReplacePoint (`id (`ns_addresses_rp),
-		`SelectionBox (`id (`ns_addresses),
-		    // selection box label
-		    _("&Name Servers"), [])
-	    ),
-	    `HBox (
-		`HStretch (),
-		`PushButton (`id (`ns_add), `opt (`key_F3),
-		    Label::AddButton ()),
-		`PushButton (`id (`ns_delete), `opt(`key_F5),
-		    Label::DeleteButton ()),
-		`HStretch ()
-	    )
-	),
-	"init" : nsInit,
-	"handle" : nsHandle,
-	"store" : nsStore,
-	"handle_events" : [ `ns_add, `ns_delete ],
-    ];
-}
-
-// mail relays widget
-
-/**
- * handle function of a widget
- * @param id any widget key of widget that is processed
- * @param event map event that occured
- * @return symbol symbol for ws or nil
- */
-global define symbol mxHandle (string id, map event) ``{
-    if (event["ID"]:nil == `mx_add)
-    {
-	string new = nil;
-	UI::OpenDialog (`VBox (
-	    // text entry
-	    `InputField (`id (`address), `opt (`hstretch), _("&Mail Relay")),
-	    // int field
-	    `IntField (`id (`priority), _("&Priority"), 0, 100, 10),
-	    `ButtonBox (
-		`PushButton (`id (`ok), `opt (`okButton, `default, `key_F10), Label::OKButton ()),
-		`PushButton (`id (`cancel), `opt (`cancelButton, `key_F9), Label::CancelButton ())
-	    )
-	));
-	any ret = nil;
-	integer priority = 0;
-	while (ret == nil)
-	{
-	    ret = UI::UserInput ();
-	    if (ret == `ok)
-		new = (string)UI::QueryWidget (`id (`address), `Value);
-	}
-	priority = (integer)UI::QueryWidget (`id (`priority), `Value);
-	UI::CloseDialog ();
-	if (new == nil)
-	    return nil;
-	new = sformat ("%1 %2", priority, new);
-	current_zone_mx = add (current_zone_mx, new);
-    }
-    else if (event["ID"]:nil == `mx_delete)
-    {
-	string selected = (string)
-	    UI::QueryWidget (`id (`mx_addresses), `CurrentItem);
-	if (selected == nil)
-	{
-	    // popup message
-	    Popup::Message (_("No name server selected."));
-	    return nil;
-	}
-	current_zone_mx = filter (string s, current_zone_mx, ``(
-	    s != selected));
-    }
-    UI::ReplaceWidget (`mx_addresses_rp, `SelectionBox (`id (`mx_addresses),
-	// selection box label
-	_("&Mail Relays"),
-	current_zone_mx));
-    return nil;
-}
-
-/**
- * Initialize function of a widget
- * @param id any widget key of widget that is processed
- */
-global define void mxInit (string id) ``{
-    string zone_name = current_zone["zone"]:"";
-    list<map> records = filter (map r, (list<map>)(current_zone["records"]:[]), ``(
-	r["type"]:"" == "MX"
-	&& (r["key"]:"" == sformat ("%1.", zone_name)
-	    || r["key"]:"" == zone_name)
-    ));
-    current_zone_mx = maplist (map r, records, ``(r["value"]:""));
-    current_zone_mx = filter (string z, current_zone_mx, ``(z != ""));
-    mxHandle (id, $[]);
-}
-
-/**
- * Store settings of the widget
- * @param id string widget id
- * @param event map event that caused storing process
- */
-global define void mxStore (string id, map event) ``{
-    string zone_name = current_zone["zone"]:"";
-    list records = filter (map r, current_zone["records"]:[], ``(
-	! (r["type"]:"" == "MX"
-	&& (r["key"]:"" == sformat ("%1.", zone_name)
-	    || r["key"]:"" == zone_name))
-    ));
-    list new_rec = maplist (string a, current_zone_mx, ``(
-	$[
-	    "key" : sformat ("%1.", zone_name),
-	    "type" : "MX",
-	    "value" : a,
-	]
-    ));
-    current_zone["records"] = merge (new_rec, records);
-    return;
-}
-
-/**
- * Get map of widget
- * @return map of widget
- */
-define map getMailRelaysWidget () ``{
-    return $[
-	"widget" : `custom,
-	"custom_widget" : `VBox (
-	    `ReplacePoint (`id (`mx_addresses_rp),
-		`SelectionBox (`id (`mx_addresses),
-		    `opt (`notify, `immediate),
-		    // selection box label
-		    _("&Mail Relays"), [])
-	    ),
-	    `HBox (
-		`HStretch (),
-		// push button
-		`PushButton (`id (`priority), _("Set &Priority")),
-		`HStretch ()
-	    ),
-	    `HBox (
-		`HStretch (),
-		`PushButton (`id (`mx_add), `opt (`key_F3),
-		    Label::AddButton ()),
-		`PushButton (`id (`mx_delete), `opt(`key_F5),
-		    Label::DeleteButton ()),
-		`HStretch ()
-	    )
-	),
-	"init" : mxInit,
-	"handle" : mxHandle,
-	"store" : mxStore,
-    ];
-}
-
-// master domain options
-
-/**
- * Convert id to key
- * @param table map widget description map
- * @param opt_id any option id
- * @return any option key
- */
-global define any masterId2Key (map table, any opt_id) ``{
-    integer index = (integer)opt_id;
-    return current_zone["records", index, "type"]:"A";
-}
-
-/**
- * Delete function of the master table
- * @param opt_id any option id of selected option
- * @param opt_key any option key of selected option
- * @return boolean true if was really deleted
- */
-global define boolean masterTableEntryDelete (any opt_id, string opt_key) ``{
-    integer index = (integer)opt_id;
-    // message popup
-    if (! Popup::YesNo (_("Delete selected resource record?")))
-	return false;
-    current_zone_upd_ops = add (current_zone_upd_ops, $[
-	"operation" : "delete",
-	"type" : current_zone["records", index, "type"]:"",
-	"key" : current_zone["records", index, "key"]:"",
-	"value" : current_zone["records", index, "value"]:"",
-    ]);
-    current_zone["records", index] = $[];
-    current_zone["records"] = filter (map r, current_zone["records"]:[],
-	``(r != $[]));
-    return true;
-}
-
-/**
- * Function for getting contents of the master table
- * @param descr map description map of the table
- * @return list items for the table
- */
-global define list getMasterTableContents (map descr) ``{
-    string zone_name = current_zone["zone"]:"";
-    integer index = -1;
-    list<integer> ret = maplist (map m, current_zone["records"]:[], ``{
-	index = index + 1;
-	if (m["type"]:"" == "TTL" || m["type"]:"" == "ORIGIN")
-	    return -1;
-/*	if ((m["type"]:"" == "NS" || m["type"]:"" == "MX")
-	    && (m["key"]:"" == sformat ("%1.", zone_name)
-		|| m["key"]:"" == zone_name))
-	{
-	    return nil;
-	}*/
-	return index;
-    });
-    ret = filter (integer r, ret, ``(r != nil && r != -1));
-    return ret;
-}
-
-/**
- * Initialize the widget
- * @param key any widget id
- */
-define void MasterTableInit (string key) ``{
-    current_zone_upd_ops = current_zone["update_actions"]:[];
-    TablePopup::TableInitWrapper (key);
-}
-
-/**
- * Store settings of the widget
- * @param key string widget id
- * @param event map event that caused storing process
- */
-define symbol MasterTableStore (string key, map event) ``{
-    current_zone["update_actions"] = maplist (map m, current_zone_upd_ops, ``{
-	m["zone"] = current_zone["zone"]:"";
-	return m;
-    });
-    return nil;
-}
-
-/**
- * Handle function of the widget
- * @param key string widget id
- * @param event map event that caused storing process
- * @return symbol always nil
- */
-global define symbol MasterTableHandle (string key, map event) ``{
-    map<string, any> widget = CWM::GetProcessedWidget ();
-    if (regexpmatch (current_zone["zone"]:"", "in-addr\\.arpa\\.?$") || regexpmatch (current_zone["zone"]:"", "\\.ip6\\.arpa\\.?$"))
-	widget["add_items"] = [ "PTR", "NS" ];
-    else
-	widget["add_items"] = [ "A", "AAAA", "CNAME", "NS", "MX" ];
-    return TablePopup::TableHandle(widget, key, event);
-}
-
-/**
- * Get map of widget
- * @return map of widget
- */
-global define map getMasterTableWidget () ``{
-    map ret = TablePopup::CreateTableDescr ($[
-	"add_delete_buttons" : true,
-	"up_down_buttons" : false
-    ], $[
-	"init" : MasterTableInit,
-	"store" : MasterTableStore,
-	"handle" : MasterTableHandle,
-	"options" : DnsServerUI::popups,
-	"ids" : getMasterTableContents,
-	"id2key" : masterId2Key,
-	"fallback" : $[
-	    "init" : masterPopupInit,
-	    "store" : masterPopupStore,
-	    "summary" : masterTableEntrySummary,
-	    "label_func" : masterTableLabelFunc,
-	],
-	"option_delete" : masterTableEntryDelete,
-	"add_items" : [ "AAAA", "A", "CNAME", "PTR", "NS", "MX" ],
-	"add_items_keep_order" : true,
-	"add_unlisted" : false,
-	"help" : HELPS["master_zone"]:"",
-    ]);
-    return ret;
-}
-
-// list of zone masters
-
-/**
- * Handle function of the widget
- * @param key string widget id
- * @param event map event that caused storing process
- * @return symbol always nil
- */
-global define symbol zoneMastersHandle (string key, map event) ``{
-    if (event["ID"]:nil == `master_add)
-    {
-	string new = nil;
-	UI::OpenDialog (`VBox (
-	    // text entry
-	    `InputField (`id (`address), `opt (`hstretch), _("Address of &Master")),
-	    `ButtonBox (
-		`PushButton (`id (`ok), `opt (`okButton, `default, `key_F10), Label::OKButton ()),
-		`PushButton (`id (`cancel), `opt (`cancelButton, `key_F9), Label::CancelButton ())
-	    )
-	));
-	any ret = nil;
-	while (ret == nil)
-	{
-	    ret = UI::UserInput ();
-	    if (ret == `ok)
-		new = (string)UI::QueryWidget (`id (`address), `Value);
-	}
-	UI::CloseDialog ();
-	if (new == nil)
-	    return nil;
-	current_zone_masters = add (current_zone_masters, new);
-    }
-    else if (event["ID"]:nil == `master_delete)
-    {
-	string selected = (string)
-	    UI::QueryWidget (`id (`masters), `CurrentItem);
-	if (selected == nil)
-	{
-	    // popup message
-	    Popup::Message (_("No name server selected."));
-	    return nil;
-	}
-	current_zone_masters = filter (string s, current_zone_masters, ``(
-	    s != selected));
-    }
-    UI::ReplaceWidget (`masters_rp, `SelectionBox (
-	`id (`masters),
-	// selection box
-	_("Master Name Servers"),
-	current_zone_masters
-    ));
-    return nil;
-}
-
-/**
- * Initialize the widget
- * @param key any widget id
- */
-global define void zoneMastersInit (string key) ``{
-    string zm = current_zone["masters"]:"";
-    integer i = findfirstof (zm, "{");
-    if (i != nil)
-	zm = substring (zm, i + 1);
-    i = findfirstof (zm, "}");
-    if (i != nil)
-	zm = substring (zm, 0, i);
-    current_zone_masters = splitstring (zm, ";");
-    current_zone_masters = maplist (string m, current_zone_masters, ``(
-	mergestring (splitstring (m, " "), "")
-    ));
-    current_zone_masters = filter (string m, current_zone_masters, ``(
-	m != ""));
-    zoneMastersHandle (key, $[]);
-}
-
-/**
- * Store settings of the widget
- * @param key string widget id
- * @param event map event that caused storing process
- */
-global define void zoneMastersStore (string key, map event) ``{
-    current_zone["masters"] = sformat ("{ %1; }",
-	mergestring (current_zone_masters, "; "));
-}
-
-/**
- * Get the widget description map
- * @return map widget description map
- */
-define map getZoneMastersWidget () ``{
-    return $[
-	"widget" : `custom,
-	"custom_widget" : `VBox (
-	    `ReplacePoint (`id (`masters_rp), `SelectionBox (
-		`id (`masters),
-		// selection box
-		_("Master Name Servers"),
-		[]
-	    )),
-	    `HBox (
-		`PushButton (`id (`master_add), Label::AddButton ()),
-		`PushButton (`id (`master_delete), Label::DeleteButton ()),
-		`HStretch ()
-	    )
-	),
-	"init" : zoneMastersInit,
-	"handle" : zoneMastersHandle,
-	"handle_events" : [`master_add, `master_delete],
-	"store" : zoneMastersStore,
-	"help" : HELPS["zone_masters"]:"",
-    ];
-}
-
-// select interface classes to allow access
-
-/**
- * Initialize the widget
- * @param id any widget id
- */
-global define void IfacesInit (string id) ``{
-    list<string> ai = DnsServer::GetAllowedInterfaces ();
-    UI::ChangeWidget (`id (`int), `Value, contains (ai, "int"));
-    UI::ChangeWidget (`id (`ext), `Value, contains (ai, "ext"));
-    UI::ChangeWidget (`id (`dmz), `Value, contains (ai, "dmz"));
-}
-
-/**
- * Store settings of the widget
- * @param id string widget id
- * @param event map event that caused storing process
- */
-global define void IfacesStore (string id, map event) ``{
-    list<string> ai = [];
-    if ((boolean)UI::QueryWidget (`id (`int), `Value))
-	ai = add (ai, "int");
-    if ((boolean)UI::QueryWidget (`id (`ext), `Value))
-	ai = add (ai, "ext");
-    if ((boolean)UI::QueryWidget (`id (`dmz), `Value))
-	ai = add (ai, "dmz");
-    DnsServer::SetAllowedInterfaces (ai);
-}
-
-/**
- * Get the widget description map
- * @return map widget description map
- */
-define map getIfaceClassesWidget () ``{
-    return $[
-	"widget" : `custom,
-	// frame
-	"custom_widget" : `Frame (_("Interface Classes"), `VBox (
-	    `VSpacing (1),
-	    // check box
-	    `Left (`CheckBox (`id(`int), _("Allow &Internal Interfaces"))),
-	    `VSpacing (1),
-	    // check box
-	    `Left (`CheckBox (`id(`ext), _("Allow &External Interfaces"))),
-	    `VSpacing (1),
-	    // check box
-	    `Left (`CheckBox (`id(`dmz), _("Allow &Demilitarized Zone"))),
-	    `VSpacing (1)
-	)),
-	"init" : IfacesInit,
-	"store" : IfacesStore,
-	"help" : HELPS["iface_classes"]:"",
-    ];
-}
-
-// DDNS allowing widget
-
-/**
- * Handle function of the widget
- * @param id string widget id
- * @param event map event that caused storing process
- * @return symbol always nil
- */
-global define symbol AllowDdnsHandle (string id, map event) ``{
-    boolean enabled = (boolean)UI::QueryWidget (`id (id), `Value);
-    while (enabled && size (DnsTsigKeys::ListTSIGKeys ()) == 0)
-    {
-	// yes-no popup
-	if (! Popup::YesNo (_("No TSIG key is defined. Define it now?")))
-	{
-	    UI::ChangeWidget (`id (id), `Value, false);
-	    UI::ChangeWidget (`id ("ddns_key"), `Enabled, false);
-	    return nil;
-	}
-	return `ddns;
-    }
-    UI::ChangeWidget (`id ("ddns_key"), `Enabled, enabled);
-    return nil;
-}
-
-/**
- * Initialize the widget
- * @param id any widget id
- */
-global define void AllowDdnsInit (string id) ``{
-    boolean allowed = false;
-    string key = nil;
-    list <map <string, any> > updater_keys_m = DnsTsigKeys::ListTSIGKeys ();
-    list<string> updater_keys = maplist (map m, updater_keys_m, ``(
-	m["key"]:""
-    ));
-    UI::ReplaceWidget (`ddns_key_rp,
-	`ComboBox (
-	    `id ("ddns_key"),
-	    `opt (`hstretch),
-	    // combo box
-	    _("TSIG &Key"),
-	    updater_keys));
-    foreach (map m, current_zone["options"]:[], ``{
-	if (m["key"]:"" == "allow-update" && ! allowed)
-	{
-	    key = regexpsub (
-		m["value"]:"",
-		"^.*key[ \t]+([^ \t;]+)[ \t;]+.*$",
-		"\\1");
-	    if (key != nil)
-	    {
-		allowed = true;
-	    }
-	}
-    });
-    UI::ChangeWidget (`id (id), `Value, allowed);
-    if (allowed)
-    {
-	UI::ChangeWidget (`id ("ddns_key"), `Value, key);
-    }
-    AllowDdnsHandle (id, $[]);
-}
-
-/**
- * Store settings of the widget
- * @param id string widget id
- * @param event map event that caused storing process
- */
-global define void AllowDdnsStore (string id, map event) ``{
-    current_zone["options"] = maplist (map m, current_zone["options"]:[], ``{
-	if (m["key"]:"" == "allow-update"
-	    && regexpmatch (m["value"]:"", "^.*key[ \t]+[^ \t;]+[ \t;]+.*$"))
-	{
-	    return $[];
-	}
-	return m;
-    });
-    current_zone["options"] = filter (map m, current_zone["options"]:[], ``(
-	m != $[]
-    ));
-    string key = (string)UI::QueryWidget (`id ("ddns_key"), `Value);
-    boolean allowed = (boolean)UI::QueryWidget (`id (id), `Value);
-    if (allowed)
-    {
-	current_zone["options"] = add (current_zone["options"]:[], $[
-	    "key" : "allow-update",
-	    "value" : sformat ("{ key %1; }", key),
-	]);
-    }
-}
-
-// generic stuff
-
-    /**
-      * Create the wodgets description map
-      * @return the widgets description map
-      */
-    global define map InitWidgets () ``{
-	return $[
-	    "global_table" : getGlobalTableWidget (),
-	    "zones" : getZoneListWidget (),
-	    "master_table" : getMasterTableWidget (),
-	    "start" : getStartWidget (),
-	    "chroot" : getChrootWidget (),
-	    "zone_direction" : getZoneDirectionWidget (),
-	    "zone_type" : getZoneTypeWidget (),
-	    "zone_name" : getZoneNameWidget (),
-	    "soa" : getSoaWidget (),
-	    "soa_button" : getSoaButton (),
-	    "advanced_mbutton" : getAdvancedMenubutton (),
-	    "ns_widget" : getNameServersWidget (),
-	    "mx_widget" : getMailRelaysWidget (),
-//	    "ns_mx_button" : getNsMxButton (),
-	    "zone_masters" : getZoneMastersWidget (),
-	    "interface_classes" : getIfaceClassesWidget (),
-//	    "allow_ddns" : getAllowDdnsWidget (),
-//	    "ddns_keys" : getDdnsKeysWidget (),
-	];
-    }
-
-/* EOF */
-}
diff --git a/yast2-dns-server.spec.in b/yast2-dns-server.spec.in
index cc654b2..ff4f7b7 100644
--- a/yast2-dns-server.spec.in
+++ b/yast2-dns-server.spec.in
@@ -33,6 +33,8 @@ Requires:	yast2 >= 2.17.8
 
 BuildArchitectures:	noarch
 
+Requires:       yast2-ruby-bindings >= 1.0.0
+
 Summary:	YaST2 - DNS Server Configuration
 
 %description
@@ -50,8 +52,8 @@ This package contains the YaST2 component for DNS server configuration.
 %defattr(-,root,root)
 %dir @yncludedir@/dns-server
 @yncludedir@/dns-server/*
-@clientdir@/dns-server.ycp
-@clientdir@/dns-server_*.ycp
+@clientdir@/dns-server.rb
+@clientdir@/dns-server_*.rb
 @moduledir@/*
 @desktopdir@/dns-server.desktop
 @scrconfdir@/dns_named.scr
