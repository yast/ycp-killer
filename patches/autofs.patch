This patch removes two files clients which were not mentioned in Makefile.am and
at the same time used non-existing symbols from the Autofs module. They are
probably obsolete.

TODO: Discuss this with upstream and possibly remove the files there.

diff --git a/doc/autodocs/Makefile.am b/doc/autodocs/Makefile.am
index cb9e9f3..4365926 100644
--- a/doc/autodocs/Makefile.am
+++ b/doc/autodocs/Makefile.am
@@ -1,3 +1,5 @@
 # Makefile.am for autofs/doc/autodocs
 
-include $(top_srcdir)/autodocs-ycp.ami
+# TODO FIXME: temporarily disabled
+
+#include $(top_srcdir)/autodocs-ycp.ami
diff --git a/src/clients/autofs.ycp b/src/clients/autofs.ycp
index a490e37..bfe5550 100644
--- a/src/clients/autofs.ycp
+++ b/src/clients/autofs.ycp
@@ -56,14 +56,14 @@ map cmdline_description = $[
     "initialize"        : Autofs::Read,
     "finish"            : Autofs::Write,
     "actions"           : $[
-	// FIXME TODO: fill the functionality description here
-    ],
+	
+    ],// FIXME TODO: fill the functionality description here
     "options"		: $[
-	// FIXME TODO: fill the option descriptions here
-    ],
+	
+    ],// FIXME TODO: fill the option descriptions here
     "mappings"		: $[
-	// FIXME TODO: fill the mappings of actions and options here
-    ]
+	
+    ] // FIXME TODO: fill the mappings of actions and options here
 ];
 
 /* is this proposal or not? */
diff --git a/src/clients/autofs_auto.ycp b/src/clients/autofs_auto.ycp
deleted file mode 100644
index 35be156..0000000
--- a/src/clients/autofs_auto.ycp
+++ /dev/null
@@ -1,118 +0,0 @@
-/* ------------------------------------------------------------------------------
- * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
- *
- *
- * This program is free software; you can redistribute it and/or modify it under
- * the terms of version 2 of the GNU General Public License as published by the
- * Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
- * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License along with
- * this program; if not, contact Novell, Inc.
- *
- * To contact Novell about this file by physical or electronic mail, you may find
- * current contact information at www.novell.com.
- * ------------------------------------------------------------------------------
- */
-
-/**
- * File:	clients/autofs_auto.ycp
- * Package:	Configuration of autofs
- * Summary:	Client for autoinstallation
- * Authors:	Peter Varkoly <varkoly@novell.com>
- *
- * $Id: autofs_auto.ycp 27914 2006-02-13 14:32:08Z locilka $
- *
- * This is a client for autoinstallation. It takes its arguments,
- * goes through the configuration and return the setting.
- * Does not do any changes to the configuration.
- */
-
-/**
- * @param function to execute
- * @param map/list of autofs settings
- * @return map edited settings, Summary or boolean on success depending on called function
- * @example map mm = $[ "FAIL_DELAY" : "77" ];
- * @example map ret = WFM::CallFunction ("autofs_auto", [ "Summary", mm ]);
- */
-
-{
-
-textdomain "autofs";
-
-y2milestone("----------------------------------------");
-y2milestone("Autofs auto started");
-
-import "Autofs";
-include "autofs/wizards.ycp";
-
-any ret = nil;
-string func = "";
-map param = $[];
-
-/* Check arguments */
-if(size(WFM::Args()) > 0 && is(WFM::Args(0), string)) {
-    func = (string)WFM::Args(0);
-    if(size(WFM::Args()) > 1 && is(WFM::Args(1), map))
-	param = (map) WFM::Args(1);
-}
-y2debug("func=%1", func);
-y2debug("param=%1", param);
-
-/* Create a summary*/
-if(func == "Summary") {
-    ret = select(Autofs::Summary(), 0, "");
-}
-/* Reset configuration */
-else if (func == "Reset") {
-    Autofs::Import($[]);
-    ret = $[];
-}
-/* Change configuration (run AutoSequence) */
-else if (func == "Change") {
-    ret = AutofsAutoSequence();
-}
-/* Import configuration */
-else if (func == "Import") {
-    ret = Autofs::Import(param);
-}
-/* Return actual state */
-else if (func == "Export") {
-    ret = Autofs::Export();
-}
-/* Return needed packages */
-else if (func == "Packages") {
-    ret = Autofs::AutoPackages();
-}
-/* Read current state */
-else if (func == "Read") {
-    import "Progress";
-    boolean progress_orig = Progress::set (false);
-    ret = Autofs::Read();
-    Progress::set (progress_orig);
-}
-/* Write givven settings */
-else if (func == "Write") {
-    import "Progress";
-    boolean progress_orig = Progress::set (false);
-    Autofs::write_only = true;
-    ret = Autofs::Write();
-    Progress::set (progress_orig);
-}
-/* Unknown function */
-else {
-    y2error("Unknown function: %1", func);
-    ret = false;
-}
-
-y2debug("ret=%1", ret);
-y2milestone("Autofs auto finished");
-y2milestone("----------------------------------------");
-
-return ret;
-
-/* EOF */
-}
diff --git a/src/clients/autofs_proposal.ycp b/src/clients/autofs_proposal.ycp
deleted file mode 100644
index 268cc0a..0000000
--- a/src/clients/autofs_proposal.ycp
+++ /dev/null
@@ -1,107 +0,0 @@
-/* ------------------------------------------------------------------------------
- * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
- *
- *
- * This program is free software; you can redistribute it and/or modify it under
- * the terms of version 2 of the GNU General Public License as published by the
- * Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful, but WITHOUT
- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
- * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License along with
- * this program; if not, contact Novell, Inc.
- *
- * To contact Novell about this file by physical or electronic mail, you may find
- * current contact information at www.novell.com.
- * ------------------------------------------------------------------------------
- */
-
-/**
- * File:	clients/autofs_proposal.ycp
- * Package:	Configuration of autofs
- * Summary:	Proposal function dispatcher.
- * Authors:	Peter Varkoly <varkoly@novell.com>
- *
- * $Id: autofs_proposal.ycp 27914 2006-02-13 14:32:08Z locilka $
- *
- * Proposal function dispatcher for autofs configuration.
- * See source/installation/proposal/proposal-API.txt
- */
-
-{
-
-textdomain "autofs";
-
-import "Autofs";
-import "Progress";
-
-/* The main () */
-y2milestone("----------------------------------------");
-y2milestone("Autofs proposal started");
-
-string func = (string) WFM::Args(0);
-map param = (map) WFM::Args(1);
-map ret = $[];
-
-/* create a textual proposal */
-if(func == "MakeProposal") {
-    string proposal = "";
-    string warning = nil;
-    symbol warning_level = nil;
-    boolean force_reset = param["force_reset"]:false;
-
-    if(force_reset || !Autofs::proposal_valid) {
-        Autofs::proposal_valid = true;
-	boolean progress_orig = Progress::set (false);
-	Autofs::Read();
-	Progress::set (progress_orig);
-    }
-    list sum = Autofs::Summary();
-    proposal = sum[0]:"";
-
-    ret = $[
-	"preformatted_proposal" : proposal,
-	"warning_level" : warning_level,
-	"warning" : warning,
-    ];
-}
-/* run the module */
-else if(func == "AskUser") {
-    map stored = Autofs::Export();
-    symbol seq = (symbol) WFM::CallFunction("autofs", [.propose]);
-    if(seq != `next) Autofs::Import(stored);
-    y2debug("stored=%1",stored);
-    y2debug("seq=%1",seq);
-    ret = $[
-	"workflow_sequence" : seq
-    ];
-}
-/* create titles */
-else if(func == "Description") {
-    ret = $[
-	/* Rich text title for Autofs in proposals */
-	"rich_text_title" : _("Autofs"),
-	/* Menu title for Autofs in proposals */
-	"menu_title" : _("&Autofs"),
-	"id" : "autofs",
-    ];
-}
-/* write the proposal */
-else if(func == "Write") {
-    Autofs::Write();
-}
-/* unknown function */
-else {
-    y2error("unknown function: %1", func);
-}
-
-/* Finish */
-y2debug("ret=%1",ret);
-y2milestone("Autofs proposal finished");
-y2milestone("----------------------------------------");
-return ret;
-
-/* EOF */
-}
diff --git a/src/include/autofs/dialogs.ycp b/src/include/autofs/dialogs.ycp
index f230f4d..52cdd7f 100644
--- a/src/include/autofs/dialogs.ycp
+++ b/src/include/autofs/dialogs.ycp
@@ -36,6 +36,7 @@ import "Wizard";
 import "Autofs";
 
 include "autofs/helps.ycp";
+include "autofs/complex.ycp";
 
 
 /**
diff --git a/yast2-autofs.spec.in b/yast2-autofs.spec.in
index e157043..63942c1 100644
--- a/yast2-autofs.spec.in
+++ b/yast2-autofs.spec.in
@@ -9,6 +9,8 @@ BuildRequires:	perl-XML-Writer update-desktop-files yast2 yast2-devtools yast2-t
 
 BuildArchitectures:	noarch
 
+Requires:       yast2-ruby-bindings >= 1.0.0
+
 Summary:	YaST2 - Module to Create and Manage autofs Entries in LDAP
 
 %description
@@ -29,8 +31,8 @@ under ou=AUTOFS,$LDAPBASE.
 %defattr(-,root,root)
 %dir @yncludedir@/autofs
 @yncludedir@/autofs/*
-@clientdir@/autofs.ycp
-#@clientdir@/autofs_*.ycp
+@clientdir@/autofs.rb
+#@clientdir@/autofs_*.rb
 @moduledir@/Autofs*
 @desktopdir@/autofs.desktop
 %doc @docdir@
