diff --git a/library/commandline/src/modules/CommandLine.ycp b/library/commandline/src/CommandLine.ycp
index e69a0f4..8ba5163 100644
--- a/library/commandline/src/modules/CommandLine.ycp
+++ b/library/commandline/src/modules/CommandLine.ycp
@@ -220,6 +220,56 @@ you may find current contact information at www.novell.com
     }
 
 
+    list<string> Process(term line)
+    {
+	list<string> ret = [];
+	list<any> anys = argsof(line);
+	foreach(any a, anys, {
+	    if (is(a, string)) {
+		string s = (string) a;
+		ret = add(ret, s);
+	    }
+	    else if (is(a, term)) {
+		term t = (term) a;
+		if (contains([`Left, `Center, `Right], symbolof(t)))
+		    ret = add(ret, argsof(t)[0]:"");
+	    }
+	});
+	return ret;
+    }
+
+    list<symbol> GetAligns(term header)
+    {
+	list<any> anys = argsof(header);
+	list<symbol> ret = [];
+	foreach(integer i, Integer::Range(size(anys)), {
+	    any a = anys[i]:nil;
+	    if (is(a, term))
+	    {
+		term t = (term) a;
+		if (symbolof(t) == `Right)
+		    ret[i] = `right;
+	    }
+	});
+	return ret;
+    }
+
+    void UpdateWidths(list<string> columns, list<integer> & widths)
+    {
+	foreach(integer i, Integer::Range(size(columns)), {
+	    widths[i] = Integer::Max([ widths[i]:0, size(columns[i]:"") ]);
+	});
+    }
+
+    void PrintLine(term line, list<integer> widths, list<symbol> aligns)
+    {
+	list<string> columns = Process(line);
+	foreach(integer i, Integer::Range(size(columns)), {
+	    columns[i] = String::SuperPad(columns[i]:"", widths[i]:0, " ", aligns[i]:`left);
+	});
+	CommandLine::Print(mergestring(columns, " | "));
+    }
+
     /**
      *  @short Print a Table
      *  @descr Print a table using Print(). Format of table is as libyui but not all features
@@ -230,69 +280,20 @@ you may find current contact information at www.novell.com
      */
     global void PrintTable(term header, list<term> content)
     {
-	list<symbol> aligns = [];
 	list<integer> widths = [];
 
-	list<string> Process(term line)
-	{
-	    list<string> ret = [];
-	    list<any> anys = argsof(line);
-	    foreach(any a, anys, {
-		if (is(a, string)) {
-		    string s = (string) a;
-		    ret = add(ret, s);
-		}
-		else if (is(a, term)) {
-		    term t = (term) a;
-		    if (contains([`Left, `Center, `Right], symbolof(t)))
-			ret = add(ret, argsof(t)[0]:"");
-		}
-	    });
-	    return ret;
-	}
-
-	void GetAligns(term header)
-	{
-	    list<any> anys = argsof(header);
-	    foreach(integer i, Integer::Range(size(anys)), {
-		any a = anys[i]:nil;
-		if (is(a, term))
-		{
-		    term t = (term) a;
-		    if (symbolof(t) == `Right)
-			aligns[i] = `right;
-		}
-	    });
-	}
-
-	void UpdateWidths(list<string> columns)
-	{
-	    foreach(integer i, Integer::Range(size(columns)), {
-		widths[i] = Integer::Max([ widths[i]:0, size(columns[i]:"") ]);
-	    });
-	}
-
-	void PrintLine(term line)
-	{
-	    list<string> columns = Process(line);
-	    foreach(integer i, Integer::Range(size(columns)), {
-		columns[i] = String::SuperPad(columns[i]:"", widths[i]:0, " ", aligns[i]:`left);
-	    });
-	    CommandLine::Print(mergestring(columns, " | "));
-	}
-
-	UpdateWidths(Process(header));
-	foreach(term row, content, { UpdateWidths(Process(row)); });
+	UpdateWidths(Process(header), widths);
+	foreach(term row, content, { UpdateWidths(Process(row), widths); });
 
-	PrintLine(header);
+	PrintLine(header, widths, []);
 
-	GetAligns(header);
+	list<symbol> aligns = GetAligns(header);
 
 	CommandLine::Print(mergestring(maplist(integer width, widths, {
 	    return String::Repeat("-", width);
 	}), "-+-"));
 
-	foreach(term row, content, { PrintLine(row); });
+	foreach(term row, content, { PrintLine(row, widths, aligns); });
     }
 
 
diff --git a/library/commandline/testsuite/tests/tests b/library/commandline/testsuite/tests/tests
new file mode 120000
index 0000000..945c9b4
--- /dev/null
+++ b/library/commandline/testsuite/tests/tests
@@ -0,0 +1 @@
+.
\ No newline at end of file
diff --git a/library/cwm/testsuite/tests/tests b/library/cwm/testsuite/tests/tests
new file mode 120000
index 0000000..945c9b4
--- /dev/null
+++ b/library/cwm/testsuite/tests/tests
@@ -0,0 +1 @@
+.
\ No newline at end of file
diff --git a/library/desktop/src/modules/Desktop.ycp b/library/desktop/src/Desktop.ycp
index 3ced0f7..f57f665 100644
--- a/library/desktop/src/modules/Desktop.ycp
+++ b/library/desktop/src/modules/Desktop.ycp
@@ -123,20 +123,19 @@ void ReadLanguage() {
     y2debug("Language=%1", Language);
 }
 
+string ExtractDesktopFilename( string fullpath )
+{
+    list <string> path_components = splitstring(fullpath, "/");
+    string filename = path_components[ size( path_components) - 1]:"";
+
+    return filename;
+}
+
 /**
  * Read module and group data from desktop files
  * @param Values list of values to be parsed (empty to read all)
  */
 global define void Read(list<string> Values) {
-
-    string ExtractDesktopFilename( string fullpath )
-    {
-	list <string> path_components = splitstring(fullpath, "/");
-	string filename = path_components[ size( path_components) - 1]:"";
-
-	return filename;
-    }
-
     /* read modules */
     map filemap = $[];
     path filepath = nil;
diff --git a/library/sequencer/testsuite/tests/tests b/library/sequencer/testsuite/tests/tests
new file mode 120000
index 0000000..945c9b4
--- /dev/null
+++ b/library/sequencer/testsuite/tests/tests
@@ -0,0 +1 @@
+.
\ No newline at end of file
diff --git a/library/wizard/testsuite/tests/wizard_dialog.ycp b/library/wizard/testsuite/tests/wizard_dialog.ycp
index f8825de..5d58b65 100644
--- a/library/wizard/testsuite/tests/wizard_dialog.ycp
+++ b/library/wizard/testsuite/tests/wizard_dialog.ycp
@@ -23,7 +23,7 @@ you may find current contact information at www.novell.com
   // test wizard_dialog
 
   textdomain "wizard_testsuite";
-  import "./../src/Wizard";
+  import "Wizard";
 
   Wizard::CreateDialog();
   Wizard::SetHelpText( _("<p>This is the example of <tt>CreateWizardDialog()</tt></p>"));
